{
  "modules": [
    {
      "title": "Course Overview",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m0&clip=0&mode=live",
      "clips": [
        {
          "title": "Course Overview",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m0&clip=0&mode=live",
          "segments": [
            {
              "text": "Hello. My name is Paul Cheney, and welcome to my course on Hands-on Response and Design Using a CSS Preprocessor.",
              "displayTime": 0.0
            },
            {
              "text": "I teach digital media at UVU, and in my spare time I build courses for Pluralsight.",
              "displayTime": 13.0
            },
            {
              "text": "A CSS preprocessor allows you to use many programming functions to build your CSS that you may never have thought possible.",
              "displayTime": 18.0
            },
            {
              "text": "In this course, we will show you how you create many separate files for your CSS, and then automatically",
              "displayTime": 25.0
            },
            {
              "text": "combine and minify them for delivery to the web. We will also show you the power of using variables,",
              "displayTime": 31.0
            },
            {
              "text": "nesting your CSS, and how to use mix ins to automate code creation.",
              "displayTime": 37.0
            },
            {
              "text": "We will also leverage the power of inheritance to create dry code, as well as explore math functions, and control directives.",
              "displayTime": 43.0
            },
            {
              "text": "This is hands-on course, so you'll be working right",
              "displayTime": 51.0
            },
            {
              "text": "alongside me to build a responsive, mobile-first website for Aspen Dental.",
              "displayTime": 54.0
            },
            {
              "text": "Even if you don't like the dentist, you're going to love the final product.",
              "displayTime": 59.0
            },
            {
              "text": "Before beginning the course you should be familiar with HTML5, CSS3, and media queries.",
              "displayTime": 64.0
            },
            {
              "text": "I hope you'll join me, and give me a chance to convince you that using a CSS preprocessor is the way to go.",
              "displayTime": 70.0
            }
          ]
        }
      ]
    },
    {
      "title": "CSS Preprocessor Overview",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m1&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m1&clip=0&mode=live",
          "segments": [
            {
              "text": "Hello. This course will give you hands-on practice using a CSS preprocessor to design responsive websites.",
              "displayTime": 0.0
            },
            {
              "text": "My name is Paul. Let's get started.",
              "displayTime": 10.0
            },
            {
              "text": "In this unit, I will share with you foundational information to help you not only understand what a CSS",
              "displayTime": 13.0
            },
            {
              "text": "preprocessor is, but also how a CSS preprocessor fits into the web development workflow.",
              "displayTime": 19.0
            },
            {
              "text": "So what is a CSS preprocessor? To answer that question let's look at the structure of a typical web page.",
              "displayTime": 27.0
            },
            {
              "text": "First, there is someone in the world who wants to view your web page on their phone, tablet, or laptop browser.",
              "displayTime": 34.0
            },
            {
              "text": "The browser requests the HTML file from a web server. Within that HTML page, there can be links to",
              "displayTime": 41.0
            },
            {
              "text": "JavaScript files, images and graphic files, videos and animation files, and styling information stored in CSS files.",
              "displayTime": 47.0
            },
            {
              "text": "CSS files are pretty basic and don't allow for any cool stuff, but what if you could write your own CSS using",
              "displayTime": 56.0
            },
            {
              "text": "variables, loops, and functions, and then have a program automatically create this CSS for us?",
              "displayTime": 62.0
            },
            {
              "text": "Now that would be cool.",
              "displayTime": 70.0
            },
            {
              "text": "Since you're watching this video, you must be considering a CSS preprocessor.",
              "displayTime": 72.0
            },
            {
              "text": "Here are some of the reasons why you should do it. Speed, using a CSS preprocessor allows you to write less",
              "displayTime": 76.0
            },
            {
              "text": "code, which speeds up the process. Organization, using a CSS preprocessor allows you to use different files",
              "displayTime": 83.0
            },
            {
              "text": "for different screen widths, and then combine them into a long file for delivery to the client.",
              "displayTime": 92.0
            },
            {
              "text": "Modifications, CSS preprocessors allow you to make small changes that cascades throughout the entire style",
              "displayTime": 98.0
            },
            {
              "text": "sheet very quickly. Minification, a CSS preprocessor allows you to minify your CSS, which speeds up the page load time.",
              "displayTime": 105.0
            },
            {
              "text": "Error notification, I love this one. Every time I have a typo in my code, I am instantly notified by the",
              "displayTime": 114.0
            },
            {
              "text": "preprocessor so I can correct my mistake. A CSS preprocessor does not allow you to create rules that cannot",
              "displayTime": 121.0
            },
            {
              "text": "be written in standard CSS code.",
              "displayTime": 129.0
            },
            {
              "text": "So basically a CSS preprocessor takes the code you've written in the preprocess language, and converts it",
              "displayTime": 131.0
            },
            {
              "text": "into the same old CSS we've been writing for years. There are many languages that you can use to write your",
              "displayTime": 137.0
            },
            {
              "text": "code, which includes variables, loops, and functions. SASS, LESS, and Stylus are three of the most common ones.",
              "displayTime": 143.0
            },
            {
              "text": "In this course, we will be using SASS; however, once you understand the principles of one syntax,",
              "displayTime": 153.0
            },
            {
              "text": "you can easily switch to another one.",
              "displayTime": 159.0
            },
            {
              "text": "Within SASS there are two different syntaxes. You can see two examples below.",
              "displayTime": 161.0
            },
            {
              "text": "This .sass syntax was introduced in version 1. It uses .sass as the file extension and is indent based.",
              "displayTime": 167.0
            },
            {
              "text": "Because it's not like CSS, it's more difficult to learn, it is now less common than the newer version.",
              "displayTime": 175.0
            },
            {
              "text": "The .scss syntax was introduced a little bit later. It uses .scss as the file extension.",
              "displayTime": 182.0
            },
            {
              "text": "It is written with colons and semicolons just like standard CSS.",
              "displayTime": 189.0
            },
            {
              "text": "Because it's similar to CSS, it's much easier to learn. The .scss syntax is more common.",
              "displayTime": 194.0
            },
            {
              "text": "Once we have our .scss files created, we need to convert them into standard CSS.",
              "displayTime": 202.0
            },
            {
              "text": "This is accomplished by a program of some kind, Ruby, JavaScript, PHP, Node.js, and Compass are just a few of",
              "displayTime": 207.0
            },
            {
              "text": "the options you have. For this course, we will be using a free and very easy to use tool called Koala.",
              "displayTime": 216.0
            },
            {
              "text": "Koala is a GUI application for SASS, LESS, and other languages.",
              "displayTime": 223.0
            },
            {
              "text": "It can run in Windows, Linux, and Mac. You can download a copy from koala-app.com.",
              "displayTime": 228.0
            },
            {
              "text": "The last thing we need to talk about is dry versus wet coding. On the left we see CSS for two different lists.",
              "displayTime": 236.0
            },
            {
              "text": "The only difference between them is the color of the text. All the rest of the statements are written twice.",
              "displayTime": 243.0
            },
            {
              "text": "On the right we see a dry version, where we combine all the duplicate statements, and then style the colors separately.",
              "displayTime": 249.0
            },
            {
              "text": "In this example there is no repetition of this CSS statement. A CSS preprocessor makes dry coding easier to accomplish.",
              "displayTime": 255.0
            },
            {
              "text": "If you have a foundation, then it makes it easier for me to convince you to use a CSS preprocessor in your next project.",
              "displayTime": 265.0
            },
            {
              "text": "Next we will discuss seven specific ways that a CSS preprocessor can simplify your life.",
              "displayTime": 273.0
            }
          ]
        }
      ]
    },
    {
      "title": "Introduction to SASS",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m2&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction to SASS",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m2&clip=0&mode=live",
          "segments": [
            {
              "text": "Remember that in the last unit we decided that we'd be learning SASS in hopes that once you understand the",
              "displayTime": 0.0
            },
            {
              "text": "basics of one CSS preprocessor language, you can easily transfer that knowledge to another one.",
              "displayTime": 6.0
            },
            {
              "text": "My name is Paul Cheney, and I'm excited to show you some SASS.",
              "displayTime": 13.0
            },
            {
              "text": "In this unit, we will take a look at eight different features of the SASS language.",
              "displayTime": 16.0
            },
            {
              "text": "Partials and imports work hand-in-hand, so we will consider them together.",
              "displayTime": 21.0
            },
            {
              "text": "I have to say that partials and imports are my favorite feature of SASS.",
              "displayTime": 27.0
            },
            {
              "text": "This allows me to divide my CSS into multiple files, and then combine them for deployment to the web.",
              "displayTime": 30.0
            },
            {
              "text": "The example site for Aspen Dental has six files. As we work through this project, I will show you how I use each one.",
              "displayTime": 38.0
            },
            {
              "text": "The underscore identifies them as partial files. I also have a styles.css, which does not begin with an underscore.",
              "displayTime": 46.0
            },
            {
              "text": "This file is used to combine all the other files together. We have to identify a folder where the rendered",
              "displayTime": 54.0
            },
            {
              "text": "CSS is saved. Koala, the CSS preprocessor we will be using, then watches our SCSS folder, and if there are",
              "displayTime": 60.0
            },
            {
              "text": "any changes to any file, it immediately creates and saves a new CSS file for us.",
              "displayTime": 68.0
            },
            {
              "text": "The code in your styles.scss file will look like this. Notice that the files are listed without the",
              "displayTime": 77.0
            },
            {
              "text": "underscore or the file extension.",
              "displayTime": 82.0
            },
            {
              "text": "Another great feature, which I will use a lot, is variables.",
              "displayTime": 85.0
            },
            {
              "text": "Being able to use variables, especially for colors, is really cool.",
              "displayTime": 89.0
            },
            {
              "text": "In SCSS, a variable is defined with a dollar sign. You should use Symantec variables name, for example,",
              "displayTime": 93.0
            },
            {
              "text": "say your client likes orange, so you create a variable called $orange, and then assign it a hex value for orange.",
              "displayTime": 100.0
            },
            {
              "text": "This is a bad idea because later the marketing department changes the brand to purple.",
              "displayTime": 107.0
            },
            {
              "text": "Now you have a variable, which does not make sense. A better practice is to use Symantec variable names like",
              "displayTime": 114.0
            },
            {
              "text": "$primary-color, and assign it a hex value. Then if the marketing department change the brand color,",
              "displayTime": 120.0
            },
            {
              "text": "your variable still makes sense.",
              "displayTime": 128.0
            },
            {
              "text": "Another thing you can do is to create two deep variable assignments.",
              "displayTime": 130.0
            },
            {
              "text": "This way you get the color name and the Symantec name. Notice in this example I have created two variables",
              "displayTime": 134.0
            },
            {
              "text": "called $red and $blue, with a hex value assignment. Now I assign those colors to multiple Symantec variable names.",
              "displayTime": 140.0
            },
            {
              "text": "Changing the link color to red is not only easy, but also makes sense.",
              "displayTime": 147.0
            },
            {
              "text": "Selecting a darker red is one simple change as well. Variables also work well for font weights and paint gutters.",
              "displayTime": 152.0
            },
            {
              "text": "The third feature of SASS we will cover is nesting.",
              "displayTime": 159.0
            },
            {
              "text": "SASS allows you to nest your code similar to the way HTML is written.",
              "displayTime": 162.0
            },
            {
              "text": "Here's an example of nesting an ordered list, list item, and anchor inside a navigation selector.",
              "displayTime": 166.0
            },
            {
              "text": "When the CSS is rendered, you get the code on the right. Notice that all of the nested items have a nav",
              "displayTime": 174.0
            },
            {
              "text": "selector added to the front.",
              "displayTime": 180.0
            },
            {
              "text": "Now let's jump into mixin.",
              "displayTime": 183.0
            },
            {
              "text": "A mixin is like a function in a programming language. You can place a mixin at the start of the document,",
              "displayTime": 185.0
            },
            {
              "text": "and then call it from anywhere. You can even pass it values to render into your CSS.",
              "displayTime": 191.0
            },
            {
              "text": "Let's take a quick look at an example.",
              "displayTime": 197.0
            },
            {
              "text": "Let's start with the way you used to code your CSS. Here's the code for an orange button with brown text.",
              "displayTime": 200.0
            },
            {
              "text": "It is 10 lines long. Here's the code for a brown button with orange text.",
              "displayTime": 205.0
            },
            {
              "text": "It's also 10 lines long. This is an example of wet code where you write everything twice.",
              "displayTime": 210.0
            },
            {
              "text": "The problem is if you want to change the radius, you have to make two different changes.",
              "displayTime": 218.0
            },
            {
              "text": "Here's an example of SCSS mixin. Notice that I am looking for two incoming variables, a text color and a background color.",
              "displayTime": 222.0
            },
            {
              "text": "These two variables are then inserted as values in my mixin. Now that the mixin is built, I can use it in my class.",
              "displayTime": 231.0
            },
            {
              "text": "To create button1 with brown text and an orange background, I'm going to use these 3 lines of code.",
              "displayTime": 239.0
            },
            {
              "text": "Notice I am sending a value for the text and the background colors.",
              "displayTime": 244.0
            },
            {
              "text": "To create button2 with orange text and a brown background, I will use these 3 lines of code.",
              "displayTime": 248.0
            },
            {
              "text": "Once again I am sending value to the mixin. Of course you realize that adding a third button would only be",
              "displayTime": 255.0
            },
            {
              "text": "three lines of code as well. The beauty here is that if I wanted to change the button radius, I would make",
              "displayTime": 262.0
            },
            {
              "text": "one change to the mixin, and all the buttons would change.",
              "displayTime": 267.0
            },
            {
              "text": "The rendered CSS looks like this. The great part is that we did not have to type everything twice.",
              "displayTime": 270.0
            },
            {
              "text": "The next feature that we will cover is extending SASS. Extending in SASS can be messy, and some say not to",
              "displayTime": 278.0
            },
            {
              "text": "use it at all; however, if used correctly, it can dry out our CSS.",
              "displayTime": 284.0
            },
            {
              "text": "There's a couple of ways we can extend SASS, let's take a look at both.",
              "displayTime": 289.0
            },
            {
              "text": "First, you create a declaration block, and provide styling information.",
              "displayTime": 293.0
            },
            {
              "text": "Then you create a new declaration block, and extend the previous declaration block.",
              "displayTime": 297.0
            },
            {
              "text": "You can also add additional styling information. The resulting CSS looks like this.",
              "displayTime": 303.0
            },
            {
              "text": "Notice that foo1 and foo2 are combined in the first declaration block.",
              "displayTime": 309.0
            },
            {
              "text": "That's what you get with extend. Additional rules, or in this case overrides, are added in the second declaration block.",
              "displayTime": 314.0
            },
            {
              "text": "The end result looks something like this, where all the features are identical except the color red has been",
              "displayTime": 322.0
            },
            {
              "text": "superseded by the color green. A better way to extend is to create a declaration block with only the common characteristics included.",
              "displayTime": 327.0
            },
            {
              "text": "We will preface this with a percent sign, which prevents it from rendering in the CSS.",
              "displayTime": 336.0
            },
            {
              "text": "Then we will add two additional declaration blocks, which extend the common one.",
              "displayTime": 343.0
            },
            {
              "text": "The resulting CSS looks like this. Notice that the declaration block for foo1, foo2 has only the common elements.",
              "displayTime": 347.0
            },
            {
              "text": "The declaration block for foo1 and the declaration block for foo2 contain only the color changes.",
              "displayTime": 358.0
            },
            {
              "text": "This is clean and dry CSS.",
              "displayTime": 365.0
            },
            {
              "text": "SASS also has the ability to perform mathematical operations.",
              "displayTime": 368.0
            },
            {
              "text": "I use math for column widths. For example, if I want something to be 3/22 columns wide, I can do the math",
              "displayTime": 373.0
            },
            {
              "text": "when I enter the value for the property width. In this case the result is 0.25, which is missing the unit",
              "displayTime": 380.0
            },
            {
              "text": "identifier, and therefore is not valid. I will have to multiply the product by 100 to get a width of 25%,",
              "displayTime": 386.0
            },
            {
              "text": "which is the correct CSS value. I also use math for image widths.",
              "displayTime": 394.0
            },
            {
              "text": "For example, if I want an image to be 4/12 columns wide and floated to the right, I would do the math as part",
              "displayTime": 399.0
            },
            {
              "text": "of the value declaration. This is what my CSS would look like; however, I want a gap between the text and",
              "displayTime": 408.0
            },
            {
              "text": "the edge of the image, so I subtract the gutter from the total width, and then add it to the margin.",
              "displayTime": 415.0
            },
            {
              "text": "This is the rendered CSS, and it works great.",
              "displayTime": 423.0
            },
            {
              "text": "Control directives are also a cool part of SASS, but they are for more advanced users.",
              "displayTime": 427.0
            },
            {
              "text": "If, for, each, and while are all functioning inside the SASS render engine.",
              "displayTime": 432.0
            },
            {
              "text": "Let's take a look at an example of for.",
              "displayTime": 436.0
            },
            {
              "text": "We are going to generate six new selectors, and assign them a background color that gets lighter each time.",
              "displayTime": 439.0
            },
            {
              "text": "We're going to set up a loop using for with a variable of i, which repeats six times.",
              "displayTime": 445.0
            },
            {
              "text": "Next we multiply i by 10%, and assign it to the variable $howmuch.",
              "displayTime": 453.0
            },
            {
              "text": "So the first time through the value is 1 x 10% or 10%, the last time through it is 6 x 10% or 60%.",
              "displayTime": 458.0
            },
            {
              "text": "In the next line we dynamically create a new selector using shade, and then a number.",
              "displayTime": 468.0
            },
            {
              "text": "The first time through the loop it creates a selector called .shade1, the second time it creates a selector",
              "displayTime": 473.0
            },
            {
              "text": "called .shade2, and so on. We are also going to use another feature of SASS to lighten the base color of",
              "displayTime": 478.0
            },
            {
              "text": "brown for each new class we create. The first time through the loop it lightens the color by 10%,",
              "displayTime": 485.0
            },
            {
              "text": "the second time it lightens by 20%, and so on up to 60%. Here is the CSS that gets generated by this for loop.",
              "displayTime": 492.0
            },
            {
              "text": "We'll talk more about control directives later.",
              "displayTime": 499.0
            },
            {
              "text": "Well now you've seen an example of all eight of these, in theory.",
              "displayTime": 502.0
            },
            {
              "text": "Next we're going to build a multi-page responsive website for Aspen Dental.",
              "displayTime": 508.0
            },
            {
              "text": "We will use several SASS features for each unit to show you how they work together in a real-world setting.",
              "displayTime": 513.0
            }
          ]
        }
      ]
    },
    {
      "title": "Setting up a New SASS Project",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m3&clip=0&mode=live",
      "clips": [
        {
          "title": "Overview",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m3&clip=0&mode=live",
          "segments": [
            {
              "text": "Now we're ready to build a website using the power of a CSS preprocessor.",
              "displayTime": 0.0
            },
            {
              "text": "The SASS features we will explore in this unit are partials and imports.",
              "displayTime": 7.0
            },
            {
              "text": "Partials allow us to break up our CSS into multiple files for organization and sanity purposes.",
              "displayTime": 13.0
            },
            {
              "text": "Imports allows us to combine our separated files together for delivery to the client.",
              "displayTime": 20.0
            },
            {
              "text": "Make sure you have an HTML editor, and FTP program, and the Koala.app available and ready to go.",
              "displayTime": 25.0
            },
            {
              "text": "I will be using Adobe Dreamweaver for coding and for file transfer.",
              "displayTime": 34.0
            }
          ]
        },
        {
          "title": "Create a Project with Media Queries in the Partial Files",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m3&clip=1&mode=live",
          "segments": [
            {
              "text": "Here on my desktop I have a folder for the Aspen Dental website, it's currently empty.",
              "displayTime": 1.6654
            },
            {
              "text": "I'm going to be using Dreamweaver as my code editor, and I've created a site called Aspen Dental for",
              "displayTime": 9.6654
            },
            {
              "text": "Pluralsight, and there's the folder that we just saw on my desktop, and it's currently empty.",
              "displayTime": 15.6654
            },
            {
              "text": "In Dreamweaver I'm going to do File, New, and we'll start with a basic HTML file for HTML5.",
              "displayTime": 23.6654
            },
            {
              "text": "We'll save that as index. Now we're ready to create a SCSS file.",
              "displayTime": 33.6654
            },
            {
              "text": "Now remember, SASS, or SASS, has to different languages that it can use, there's the original SASS language,",
              "displayTime": 46.6654
            },
            {
              "text": "and then there's the newer updated SCSS language, and that's the one we're using in this course.",
              "displayTime": 55.6654
            },
            {
              "text": "Choose File, Save As, the first one we're going to save is for the phone, it's also the default file for all",
              "displayTime": 62.6654
            },
            {
              "text": "the rest, so we'll name it _phone-default.scss, and we need to drop it in a new folder called sass, and save it.",
              "displayTime": 69.6654
            },
            {
              "text": "Now we don't need this comment in here, so there's our first one.",
              "displayTime": 91.6654
            },
            {
              "text": "Let's do File, Save As, _tablet, which will be the middle of our design between phone and desktop,",
              "displayTime": 95.6654
            },
            {
              "text": "and we'll save it one more time as _desktop for large monitors.",
              "displayTime": 105.6654
            },
            {
              "text": "So now we have three of our SCSS files in place living inside of our SASS folder.",
              "displayTime": 114.6654
            },
            {
              "text": "Now what we need is one that combines them all together and sequences them.",
              "displayTime": 124.6654
            },
            {
              "text": "So let's do another new file. Once again we don't need the comment, we'll do File, Save As, now this file,",
              "displayTime": 129.6654
            },
            {
              "text": "because it's the combining file, does not start with an underscore.",
              "displayTime": 138.6654
            },
            {
              "text": "So we'll call it styles.scss, and drop it also in this SASS folder, click Save.",
              "displayTime": 143.6654
            },
            {
              "text": "Now the purpose of this file is to combine these other ones and sequence them.",
              "displayTime": 154.6654
            },
            {
              "text": "So in our overall design, we want to load the phone default first, so let's type @import \"\";.",
              "displayTime": 159.6654
            },
            {
              "text": "In between the quotes we'll put phone-default. Notice I have not included the underscore, nor have I",
              "displayTime": 169.6654
            },
            {
              "text": "included the file type extension, it's not necessary. Let's now do the second one and the third one.",
              "displayTime": 179.6654
            },
            {
              "text": "Our second one will load, because we're doing responsive design mobile first is the tablet, and finally we'll",
              "displayTime": 187.6654
            },
            {
              "text": "load the desktop. Save that. Now currently nothing's happening, so now we need to pull up our Koala application.",
              "displayTime": 196.6654
            },
            {
              "text": "Here on the desktop I have my Aspen Dental Website, and I'm going to need one more file in here called CSS.",
              "displayTime": 205.6654
            },
            {
              "text": "Now this is the folder which will hold the output from Koala. So let's drag the entire site folder over here",
              "displayTime": 214.6654
            },
            {
              "text": "to the left side, it's going to load it, and you'll notice that I instantly get an error message that tells",
              "displayTime": 224.6654
            },
            {
              "text": "me that I have a typo in one of my paths, it actually tells me that it's on line 1.",
              "displayTime": 231.6654
            },
            {
              "text": "So if I switch back to Dreamweaver, and I take a look at my import online, which is asking for phone-default,",
              "displayTime": 236.6654
            },
            {
              "text": "I can see that I've got a typo when I named my file over here, I forgot the L.",
              "displayTime": 246.6654
            },
            {
              "text": "That's one of the things I like about a CSS preprocessor is its error notifications.",
              "displayTime": 252.6654
            },
            {
              "text": "Now that I've changed that file name, we'll go back to the Koala app, click on it, and tell it to recompile.",
              "displayTime": 258.6654
            },
            {
              "text": "This time I get this Success message. Now over here I've got some different options.",
              "displayTime": 264.6654
            },
            {
              "text": "Automatically compile means to watch constantly for any changes, that's a definite must.",
              "displayTime": 271.6654
            },
            {
              "text": "Source Map, no I don't really need that, and we will look at these other Output Styles a little bit later.",
              "displayTime": 276.6654
            },
            {
              "text": "Next thing we need to do is come over here and set the output path so that the results wind up in our CSS folder.",
              "displayTime": 282.6654
            },
            {
              "text": "Here's our CSS folder, and you can see that by default it already is putting it there, but let's say that you",
              "displayTime": 292.6654
            },
            {
              "text": "we're using a different program that didn't use a CSS folder, maybe it used a style sheets folder,",
              "displayTime": 299.6654
            },
            {
              "text": "or maybe you're using something else. This is how you would change that output path.",
              "displayTime": 306.6654
            },
            {
              "text": "So let's go ahead and set it to styles.css, which it already is set to, we'll click Save, Replace.",
              "displayTime": 311.6654
            },
            {
              "text": "Let's go back to the desktop. I can actually delete this CSS folder.",
              "displayTime": 320.6654
            },
            {
              "text": "Come back here, and recompile it, and it will create the folder and the file for me.",
              "displayTime": 326.6654
            },
            {
              "text": "If we go back to Dreamweaver, and we open this file, we can see that it's completely empty.",
              "displayTime": 332.6654
            },
            {
              "text": "So we really don't know if it's working or not. So let's close it, let's come back to phone, and we'll put",
              "displayTime": 339.6654
            },
            {
              "text": "some rules in here, but before we do that, we need to put something on our index file that we can style.",
              "displayTime": 349.6654
            },
            {
              "text": "So let's start with an h1. So now we have an h1 inside the body tag.",
              "displayTime": 355.6654
            },
            {
              "text": "Now let's go to our phone-default.scss, let's talk to that h1, and set its color to red.",
              "displayTime": 362.6654
            },
            {
              "text": "Now, let's take a look at our styles.css. I'll open it, you can see that it's been updated with the",
              "displayTime": 374.6654
            },
            {
              "text": "information from phone-default, and we didn't have to do anything, Koala just did that in the background.",
              "displayTime": 382.6654
            },
            {
              "text": "Now we need to go back to our HTML file, and actually attach the style sheet that's living here in this CSS folder.",
              "displayTime": 388.6654
            },
            {
              "text": "So up inside the head of our document we'll do a link, href, in that href we'll do css/styles.css,",
              "displayTime": 397.6654
            },
            {
              "text": "and we also need an rel stylesheet. That should do it. Let's Save it, open it in our Chrome browser,",
              "displayTime": 410.6654
            },
            {
              "text": "and there it is red. Now, we've got the phone-default importing, now let's look at changing the color when",
              "displayTime": 422.6654
            },
            {
              "text": "it goes to the tablet. Well, at this point you should be very familiar with media queries, and I'm going to",
              "displayTime": 432.6654
            },
            {
              "text": "go ahead and drop one in here because I want my tablet rules to kick in after the browser width passes a certain point.",
              "displayTime": 436.6654
            },
            {
              "text": "Alright, so now we need to put in here a min-width of, and we could put 720px as a breakpoint between my",
              "displayTime": 451.6654
            },
            {
              "text": "phone, or small screens, and my tablet or my medium screens, but instead of using 720px, we're going to make",
              "displayTime": 463.6654
            },
            {
              "text": "it a little bit more dynamic, and we're going to convert that to ems, so 720 divided by a default base font",
              "displayTime": 470.6654
            },
            {
              "text": "size of 16 gives me 45em. So instead of 720px, we'll switch that to 45em, save it.",
              "displayTime": 479.6654
            },
            {
              "text": "Now, between the open and closing media query, we can go ahead and throw in here an h1, and on the medium",
              "displayTime": 489.6654
            },
            {
              "text": "size screen, we'll change the color to green, save it. Now I just saved the _tablet file.",
              "displayTime": 498.6654
            },
            {
              "text": "Let's open the styles, and there it's been included, the media query and the h1 to switch to green.",
              "displayTime": 509.6654
            },
            {
              "text": "Close it, let's return to our browser, refresh it, there it is green.",
              "displayTime": 517.6654
            },
            {
              "text": "So there's my phone or small screen, there's my medium screen, now let's copy this, go to our desktop,",
              "displayTime": 522.6654
            },
            {
              "text": "and instead of 45em let's break this at 1028px. So we'll pull up our calculator again, 1028 divided by 16px",
              "displayTime": 533.6654
            },
            {
              "text": "16px base font gives me 64.25, 64.25, and the color instead of being green, maybe we'll make it yellow.",
              "displayTime": 543.6654
            },
            {
              "text": "Save that, return to our browser, hit refresh, make this screen a little bit wider, there it has passed now,",
              "displayTime": 558.6654
            },
            {
              "text": "the 64.25, and it's yellow. So now we have a mobile first responsive website with a CSS preprocessor and",
              "displayTime": 568.6654
            },
            {
              "text": "four SCSS files, three of them are partials, and the fourth one imports them all, and then Koala drops that",
              "displayTime": 582.6654
            },
            {
              "text": "here into our styles.css.",
              "displayTime": 592.6654
            }
          ]
        },
        {
          "title": "Create a Project with Media Queries with the @imports",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m3&clip=2&mode=live",
          "segments": [
            {
              "text": "Now let's take a look at another way to set up your project where we put the",
              "displayTime": 0.0
            },
            {
              "text": "media queries inside of this styles.scss, rather than in the individual files.",
              "displayTime": 5.821222222222
            },
            {
              "text": "This works too, and you can pick either method. Remember the phone-default does not have a media query,",
              "displayTime": 12.821222222222
            },
            {
              "text": "so no changes are required here, but all of the rules inside of the tablet live inside of this media query.",
              "displayTime": 20.821222222222
            },
            {
              "text": "So I need to copy this line and this line and move them out. So I'm going to cut this one, cut both of",
              "displayTime": 28.821222222222
            },
            {
              "text": "these, leave only the rule that applies to the tablet, and now go to the styles.scss.",
              "displayTime": 43.821222222222
            },
            {
              "text": "Here's my media query. I'm going to take the tablet, and I'm going to put it inside of the media query for 45em.",
              "displayTime": 49.821222222222
            },
            {
              "text": "Now let's go to the desktop. Same thing, I'm going to move this media query out, cut it, save it,",
              "displayTime": 60.821222222222
            },
            {
              "text": "and instead wrap it around the desktop import, clean it up there.",
              "displayTime": 71.821222222222
            },
            {
              "text": "So now we're importing our phone, we're importing our tablet wrapped in a media query, and we're importing",
              "displayTime": 84.821222222222
            },
            {
              "text": "the desktop wrapped in a media query. Save it, make sure all of these files are saved.",
              "displayTime": 91.821222222222
            },
            {
              "text": "Notice now that the partials have only the rules, it makes it very clean to look at.",
              "displayTime": 101.821222222222
            },
            {
              "text": "Let's trust that Koala's doing its job in the background, let's check on it though.",
              "displayTime": 110.821222222222
            },
            {
              "text": "There it is, it looks exactly like it did before, and when we pull it up in our browser, and hit refresh,",
              "displayTime": 115.821222222222
            },
            {
              "text": "let's test the small screen as red, medium screen as green, and large screen as yellow.",
              "displayTime": 123.821222222222
            },
            {
              "text": "So once again, the end result is exactly the same, it's just that you've designed it a little bit different.",
              "displayTime": 133.821222222222
            },
            {
              "text": "Take your pick, put the media queries in the styles.scss, or put them in the individual partial files,",
              "displayTime": 140.821222222222
            },
            {
              "text": "they're both going to work for you.",
              "displayTime": 147.821222222222
            }
          ]
        },
        {
          "title": "A Demonstration of the Koala App Save Options",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m3&clip=3&mode=live",
          "segments": [
            {
              "text": "Next I want to demonstrate some of the features over here on the right",
              "displayTime": 0.0
            },
            {
              "text": "side of the Koala app. Let's start with looking at the output style.",
              "displayTime": 6.387888888889
            },
            {
              "text": "Now in order to demonstrate these, I've had to go back in and add a few more rules, and I've intentionally",
              "displayTime": 13.387888888889
            },
            {
              "text": "styled them different for each one. SO in the phone-default, I've got a color and font size,",
              "displayTime": 19.387888888889
            },
            {
              "text": "and I've stacked them so that they're on 1, 2, 3, 4, 5, different lines.",
              "displayTime": 24.387888888889
            },
            {
              "text": "I've done the same thing on tablet, but this time I've ran it all across on a single line.",
              "displayTime": 30.387888888889
            },
            {
              "text": "In the desktop, I've added a second rule, the first rule is on a single line, the second rule is on multiple lines.",
              "displayTime": 36.387888888889
            },
            {
              "text": "So with those combinations in the source files, let's take a look at what happens when Koala compresses this.",
              "displayTime": 46.387888888889
            },
            {
              "text": "Let's start by looking at the expanded version. I'll hit Compile, and then let's open up the output,",
              "displayTime": 54.387888888889
            },
            {
              "text": "and you can see that with the expanded option, all of the closing curly braces are on their own line.",
              "displayTime": 61.387888888889
            },
            {
              "text": "Now let's switch it from expanded to nested, let's rebuild it. Now you can see it's a little bit short file,",
              "displayTime": 71.387888888889
            },
            {
              "text": "and the closing curly brace follows the last rule for that particular selector.",
              "displayTime": 79.387888888889
            },
            {
              "text": "Let's now go to the compact version, Compile it. Now you can see everything's been stacked into a single line.",
              "displayTime": 86.387888888889
            },
            {
              "text": "So these are much, much tighter. Now let's go to the compressed version, we'll recompile it.",
              "displayTime": 96.387888888889
            },
            {
              "text": "Here everything is on a single line. There are no brakes, there are no hard returns, this is by far the most",
              "displayTime": 103.387888888889
            },
            {
              "text": "efficient way to send out code is the smallest file type, and will result in the fastest download time for",
              "displayTime": 108.387888888889
            },
            {
              "text": "your end users. Very difficult to read, but who cares, we're not working with the styles.css,",
              "displayTime": 115.387888888889
            },
            {
              "text": "we're working back here in these files where we can code it this way, or this way, or this way, and then end",
              "displayTime": 122.387888888889
            },
            {
              "text": "result is taken care of by the CSS preprocessor.",
              "displayTime": 130.387888888889
            }
          ]
        },
        {
          "title": "Adding a CSS Reset as a Partial",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m3&clip=4&mode=live",
          "segments": [
            {
              "text": "Before we wrap up this unit, I want to talk about a CSS",
              "displayTime": 0.0
            },
            {
              "text": "reset, something that you really ought to do and probably are already doing, but it works great using a CSS",
              "displayTime": 5.0
            },
            {
              "text": "preprocessor with partials and imports. Here in my phone_default, I've got an h1 with the color red,",
              "displayTime": 11.0
            },
            {
              "text": "tablet I've switched that color to green and wrapped it inside of a media query, in the desktop is another",
              "displayTime": 20.0
            },
            {
              "text": "media query, and a color of brown, and a change in the font size.",
              "displayTime": 25.551155555556
            },
            {
              "text": "Now let's go do File, New, we'll do another SCSS file, and we'll save it as _reset, and put it in the same",
              "displayTime": 33.551155555556
            },
            {
              "text": "folder as the other ones. Click Save, we don't need this comment.",
              "displayTime": 47.551155555556
            },
            {
              "text": "There are many CSS reset files that you can use. I use the one by Eric Meyer, it's free, it's a really",
              "displayTime": 51.551155555556
            },
            {
              "text": "basic file, and he's got the code here, he talks about it, and you can copy the file right here free of charge.",
              "displayTime": 59.551155555556
            },
            {
              "text": "So select all of that, copy it, return to Dreamweaver, and drop it inside our reset.scss file, and we just save that.",
              "displayTime": 68.551155555556
            },
            {
              "text": "That's part one, part two now is to open up the styles, remember this is the one who combines everything all",
              "displayTime": 78.551155555556
            },
            {
              "text": "together, and we're going to load that as the first part of our project.",
              "displayTime": 85.551155555556
            },
            {
              "text": "So, we'll load the reset, and then we'll load the phone, and then the tablet, and then the desktop, Save it.",
              "displayTime": 94.551155555556
            },
            {
              "text": "Koala is still running, so let's take a look at our browser. Notice the large font size that typically comes",
              "displayTime": 101.551155555556
            },
            {
              "text": "with an h1 has now been wiped out. The red color is still there, the green color is still there.",
              "displayTime": 106.551155555556
            },
            {
              "text": "Remember that on the desktop, we had not only a color, but also a font size change.",
              "displayTime": 114.551155555556
            },
            {
              "text": "That's why this font size gets a little bit bigger. So that's incorporating now a fourth partial file.",
              "displayTime": 118.551155555556
            },
            {
              "text": "We'll add a couple more in the next units.",
              "displayTime": 126.551155555556
            },
            {
              "text": "In this unit we saw how partials and imports work together to simplify our life as developers.",
              "displayTime": 130.551155555556
            },
            {
              "text": "In the next unit, we will build a site header using two more features of a CSS preprocessor.",
              "displayTime": 136.551155555556
            }
          ]
        }
      ]
    },
    {
      "title": "Building the Site Header",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=0&mode=live",
      "clips": [
        {
          "title": "Overview of Variables and Nesting",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=0&mode=live",
          "segments": [
            {
              "text": "Now we're ready to build a website using the power of a CSS preprocessor.",
              "displayTime": 0.0
            },
            {
              "text": "The SASS features we'll explore in this unit are variables and nesting.",
              "displayTime": 8.0
            },
            {
              "text": "A good web designer needs many skills besides coding, so before we get started on coding the header,",
              "displayTime": 12.0
            },
            {
              "text": "let's take a look at Adobe Photoshop's generate assets feature.",
              "displayTime": 17.0
            },
            {
              "text": "I've included the PSD in the demos file in case you want to see this feature in action.",
              "displayTime": 21.0
            },
            {
              "text": "Remember, in the SCSS version of the SASS language, variables begin with a dollar sign.",
              "displayTime": 26.0
            },
            {
              "text": "In this unit we will also be assigning variables to other variables.",
              "displayTime": 33.0
            },
            {
              "text": "We will also be using nesting when we build our navigation for the desktop.",
              "displayTime": 38.0
            },
            {
              "text": "Remember that nesting in the SCSS results in the expanded code you see on the right, where each nested item",
              "displayTime": 42.0
            },
            {
              "text": "is prefaced with the parent. In this case it's nav.",
              "displayTime": 49.0
            },
            {
              "text": "We'll be using navigation for the phone and tablet built by Matt Everson.",
              "displayTime": 53.0
            },
            {
              "text": "We will then design our own Suckerfish navigation for the desktop using SCSS.",
              "displayTime": 57.0
            },
            {
              "text": "You can download this navigation for your next project from his website.",
              "displayTime": 62.0
            },
            {
              "text": "Actually, Matt would really appreciate if you donated four bucks so he could buy a beer now and again.",
              "displayTime": 67.0
            },
            {
              "text": "We have already selected and loaded the font family Quicksand for this project, so let's get started.",
              "displayTime": 71.0
            }
          ]
        },
        {
          "title": "Using Photoshop Generate Assets",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=1&mode=live",
          "segments": [
            {
              "text": "Let's take a minute and take a look at Photoshop's generate image assets feature.",
              "displayTime": 0.0
            },
            {
              "text": "Here is the Photoshop file that I used to create the content for my website.",
              "displayTime": 7.1682555555556
            },
            {
              "text": "This is the finished website. Notice on the homepage that we have some triangular-shaped graphics here and",
              "displayTime": 12.1682555555556
            },
            {
              "text": "one down here. We also have our logo and some social icons up here to the top right.",
              "displayTime": 19.1682555555556
            },
            {
              "text": "Those images are all laid out here in Photoshop for me. I've color coded them over here on the right inside",
              "displayTime": 25.1682555555556
            },
            {
              "text": "of the Layers palette. These two green ones represent the open and closed position for our menu.",
              "displayTime": 31.1682555555556
            },
            {
              "text": "So if I shrink my window down, I can see that my navigation has a MENU, and a MENU with an X.",
              "displayTime": 39.1682555555556
            },
            {
              "text": "Our current design just has three hamburger bars and the X, so I've improved that a little bit.",
              "displayTime": 46.1682555555556
            },
            {
              "text": "So here's how it works, all you have to do is in the Layers palette, name a specific layer with a .png or a",
              "displayTime": 53.1682555555556
            },
            {
              "text": ".jpg file extension, and it will automatically create a graphic from that layer or group of layers.",
              "displayTime": 63.1682555555556
            },
            {
              "text": "So in this case, I have a folder called logo, inside of that folder I have a leaf, I have an apple, I have an",
              "displayTime": 71.1682555555556
            },
            {
              "text": "Aspen Dental text, and a subtext. I've combined all of those in a folder, and the folder is named logo.png.",
              "displayTime": 80.1682555555556
            },
            {
              "text": "It exports then all of those layers as a single graphic. Over here on the left you see a checkmark and a cross.",
              "displayTime": 88.1682555555556
            },
            {
              "text": "We take a look at our website, you'll notice that I've used those under Advantages and Disadvantages,",
              "displayTime": 97.1682555555556
            },
            {
              "text": "but the size of the output is half the size that I created it. I'll create these graphics at double size,",
              "displayTime": 103.168255555556
            },
            {
              "text": "so it's easier for me to build them, and then in the Layers palette I'll use 50% space, and then the name of",
              "displayTime": 110.168255555556
            },
            {
              "text": "the graphic, and then Adobe Photoshop will automatically reduce it to that percentage.",
              "displayTime": 116.168255555556
            },
            {
              "text": "You could put any percentage in here you wanted. So let's take a look at the generate assets feature in action.",
              "displayTime": 122.168255555556
            },
            {
              "text": "Here on the desktop I have my interface, it's a PSD file, it's saved in a folder.",
              "displayTime": 128.168255555556
            },
            {
              "text": "In Photoshop I simply do File, Generate, and select Image Assets.",
              "displayTime": 134.168255555556
            },
            {
              "text": "You can see that it's now selected. I don't even have to save my document.",
              "displayTime": 139.168255555556
            },
            {
              "text": "I come back here and I have a new folder that's been created with the name of my file with a -assets.",
              "displayTime": 144.168255555556
            },
            {
              "text": "When I open it up, there's all my graphics ready to drop into my web tool.",
              "displayTime": 150.168255555556
            },
            {
              "text": "Now this is a neat feature. Let's take a look at say the Facebook icon.",
              "displayTime": 155.168255555556
            },
            {
              "text": "Let's say that instead of this gold color, maybe I wanted to change my social icons to blue.",
              "displayTime": 159.168255555556
            },
            {
              "text": "So there's my Facebook, over here I have Facebook, I'll simply Option, Delete to change the color.",
              "displayTime": 169.168255555556
            },
            {
              "text": "I haven't saved, I haven't exported, I haven't done anything, and it's changed.",
              "displayTime": 173.168255555556
            },
            {
              "text": "So Adobe Photoshop watches you work, and if you make any changes, it automatically saves a new graphic for you.",
              "displayTime": 178.168255555556
            },
            {
              "text": "Come back here, Edit, Undo, boom, you saw it get changed and resaved right there.",
              "displayTime": 185.168255555556
            },
            {
              "text": "So that is the neat feature of Photoshop generate assets. I'd encourage you to use it, I have included this",
              "displayTime": 190.168255555556
            },
            {
              "text": "file as part of the downloads, so that you can open it up and play around with it.",
              "displayTime": 196.168255555556
            },
            {
              "text": "Now that we have all of our assets created, let's open our interface-assets folder, and put them in the",
              "displayTime": 199.168255555556
            },
            {
              "text": "appropriate place inside of our website. So I like to put all of my photo-type graphics that go inline in a",
              "displayTime": 205.168255555556
            },
            {
              "text": "photos folder, and then I look to put all of the graphics, which are part of the overall interface in my images folder.",
              "displayTime": 214.168255555556
            },
            {
              "text": "So all of these are going to go into here. I already have a close-icon-large and a menu-icon-large from my",
              "displayTime": 223.168255555556
            },
            {
              "text": "mobile dropdown menu. I'm going to replace those with my new ones for my menuClose and menuOpen.",
              "displayTime": 233.0
            }
          ]
        },
        {
          "title": "Examining the Start File",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=2&mode=live",
          "segments": [
            {
              "text": "We're going to be building the header for this using some features of a CSS preprocessor.",
              "displayTime": 2.0349222222226
            },
            {
              "text": "I've already put some of the HTML and CSS in place that is not specific to a CSS preprocessor so that we can",
              "displayTime": 8.0349222222226
            },
            {
              "text": "focus our time and attention on those features. I've already download the mobile dropdown menus from Matt",
              "displayTime": 16.0349222222226
            },
            {
              "text": "Everson, and they're here on my desktop. I've included into my file in the images, his graphics.",
              "displayTime": 23.0349222222226
            },
            {
              "text": "He has this large one here and this large one here. We will be replacing both of those with our own graphics.",
              "displayTime": 32.0349222222226
            },
            {
              "text": "So there's a modification that we're going to have to do. I've also included in my sass folder the",
              "displayTime": 40.0349222222226
            },
            {
              "text": "_mobilemenu.css that he provides in his ZIP file. I've added an underscore to the beginning,",
              "displayTime": 46.0349222222226
            },
            {
              "text": "and I've simply changed the extension to .scss instead of .css.",
              "displayTime": 52.0349222222226
            },
            {
              "text": "Remember that the second version of the SASS language, SCSS, is written almost identical to CSS,",
              "displayTime": 59.0349222222226
            },
            {
              "text": "so converting a file from one to the other works great. Also in my styles, I have included his _mobilemenu",
              "displayTime": 68.0349222222226
            },
            {
              "text": "as the last import. Let's switch to Dreamweaver, let's open the _mobilemenu, and take a look at some of the",
              "displayTime": 76.0349222222226
            },
            {
              "text": "changes we've had to make. I've tried to indicate those with a comment that says changed by Paul, so if you",
              "displayTime": 83.0349222222226
            },
            {
              "text": "pull up his generic version, and then you look at the one from the demos, you can see kind of the changes",
              "displayTime": 90.0349222222226
            },
            {
              "text": "that I've had to make. In the CSS provided by Matt, there's a couple of illegal characters.",
              "displayTime": 95.0349222222226
            },
            {
              "text": "The first one is on line 103, it's this dash inside of a comment.",
              "displayTime": 101.034922222223
            },
            {
              "text": "For some reason, our Koala app throws a fit when we try and use a CSS preprocessor on that.",
              "displayTime": 106.034922222223
            },
            {
              "text": "The second thing is this triangle right here. It doesn't like that character.",
              "displayTime": 113.034922222223
            },
            {
              "text": "So in our modified code, I've had to take the dash out of line 96, and I've had to change the content from a",
              "displayTime": 118.034922222223
            },
            {
              "text": "triangular graphic to the hex code that represents it, which is /25BC.",
              "displayTime": 131.034922222223
            },
            {
              "text": "This now compiles beautifully with our CSS preprocessor. Also at the top of the CSS provided,",
              "displayTime": 138.034922222223
            },
            {
              "text": "there's a breakpoint of 475px, that's not what I want. I'm going to break this at 64.25, which is the same",
              "displayTime": 145.034922222223
            },
            {
              "text": "as the breakpoint for my desktop, 64.25. That way the mobile menus disappear at the same time the desktop takes over.",
              "displayTime": 154.034922222223
            },
            {
              "text": "In addition to the modifications to the _mobilemenu, I've also added a bunch of stuff to our default index.html file.",
              "displayTime": 164.034922222223
            },
            {
              "text": "Here we have a statement that prevents our phones from lying about their width.",
              "displayTime": 174.034922222223
            },
            {
              "text": "I've also added the latest version of jQuery, and we've added a Google font, which I mentioned earlier of",
              "displayTime": 179.034922222223
            },
            {
              "text": "Quicksand, a weight of 400 for normal and 700 for bold. Here's a link to the style sheet.",
              "displayTime": 184.034922222223
            },
            {
              "text": "Here's this script that's provided in our _mobilemenu, that allows the menu to open when it's touched,",
              "displayTime": 192.034922222223
            },
            {
              "text": "and close when it's touched. I've also got this Internet Explorer hack to make old Internet Explorer function properly.",
              "displayTime": 199.034922222223
            },
            {
              "text": "Down in the body, I've added a header. I've got a section here for the logo, it contains an h1 and an h2,",
              "displayTime": 209.034922222223
            },
            {
              "text": "which are both hidden by the CSS. I have my social icons, which float to the right, and are linked to the",
              "displayTime": 216.034922222223
            },
            {
              "text": "images that we created earlier. My navigation is set up as standard unordered list with links to not only",
              "displayTime": 223.034922222223
            },
            {
              "text": "index page, but future pages we will build during this course.",
              "displayTime": 230.034922222223
            },
            {
              "text": "And then there's the nav button, which you can see on the mobile, when I shrink down that right there is that nav button.",
              "displayTime": 235.034922222223
            },
            {
              "text": "Notice that the navigation in this particular site is contained inside the header.",
              "displayTime": 246.034922222223
            },
            {
              "text": "Sometimes I put it below the header, in this case I wanted it to appear on the desktop, over here to the",
              "displayTime": 253.034922222223
            },
            {
              "text": "right, so the graphic logo's here, the navigation's here all inside of the header area.",
              "displayTime": 260.034922222223
            },
            {
              "text": "I've got a main section, which contains basically nothing, and I've dropped in the footer information,",
              "displayTime": 267.034922222223
            },
            {
              "text": "which we've styled a little bit as well. Inside our phone-default, we have a statement here that stops text",
              "displayTime": 274.034922222223
            },
            {
              "text": "from resizing in WebKit, or in other words on iPhones. For some reason when you rotate from landscape to",
              "displayTime": 281.034922222223
            },
            {
              "text": "portrait back, the font size changes, so this prevents that. I've also applied the natural box layout model to everything.",
              "displayTime": 287.034922222223
            },
            {
              "text": "This is critical if you're going to be a serious designer because it eliminates the problems of some browsers",
              "displayTime": 297.034922222223
            },
            {
              "text": "adding padding to the outside, and other browsers adding padding to the inside.",
              "displayTime": 307.034922222223
            },
            {
              "text": "My basic body font is set to 16, that's a default, I always put that in there as just to remind me.",
              "displayTime": 311.034922222223
            },
            {
              "text": "I have the CSS in place for the social icons and for the navigation.",
              "displayTime": 318.034922222223
            },
            {
              "text": "On my tablet, I have the logo changing size a little bit, and I'm changing the social icons position.",
              "displayTime": 326.034922222223
            },
            {
              "text": "And on the desktop, I've limited the overall width of my page, and then once again tweaked the position of",
              "displayTime": 333.034922222223
            },
            {
              "text": "the header just a little bit. And that's all we've got. At this point it's just basic CSS.",
              "displayTime": 343.034922222223
            },
            {
              "text": "Next we're going to start adding our CSS preprocessor stuff that I promised awhile back.",
              "displayTime": 348.034922222223
            }
          ]
        },
        {
          "title": "Implementing Variables for the Header",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=3&mode=live",
          "segments": [
            {
              "text": "In our Photoshop template, we've got some colors over here, and let's start by converting those into CSS variables.",
              "displayTime": 0.0
            },
            {
              "text": "I'm going to select this brown color, copy the hex value, jump to Dreamweaver, and in my variables partial,",
              "displayTime": 10.9015888888896
            },
            {
              "text": "I'm going to start with $brown: and then paste that hex value. And I'm going to put a comment up here",
              "displayTime": 18.9015888888896
            },
            {
              "text": "because I like to keep things organized. We're also going to be doing the colors for $orange, $blue,",
              "displayTime": 28.9015888888896
            },
            {
              "text": "$dkgrey, and $ltgrey in a similar manner. Now let's create some variables that'll actually get used in our code.",
              "displayTime": 36.9015888888896
            },
            {
              "text": "Let's create a new variable for $text=color, and let's assign it the value of #dkgrey, and then we'll have a",
              "displayTime": 43.9015888888896
            },
            {
              "text": "$menu-color, and we'll use the $blue color for that. We'll also have a $body_color and a $link_color done in",
              "displayTime": 50.9015888888896
            },
            {
              "text": "a similar fashion. Now the body color is just white, so it's kind of unnecessary, but I just put it up here",
              "displayTime": 61.9015888888896
            },
            {
              "text": "because, assign it a value of FFF. I'll use it for some crazy reason I decide not to use white,",
              "displayTime": 71.9015888888896
            },
            {
              "text": "I just simply change this variable and it's done, but I did not create a variable up here called white,",
              "displayTime": 77.9015888888896
            },
            {
              "text": "and then reuse it here because that just doesn't make sense to me.",
              "displayTime": 82.9015888888896
            },
            {
              "text": "In addition to colors, we can also use variables for fonts. So let's create a new section, and we'll have a",
              "displayTime": 86.9015888888896
            },
            {
              "text": "variable called $default_font_family, and the font that we're using is Quicksand, and if for some reason the",
              "displayTime": 93.9015888888896
            },
            {
              "text": "font doesn't load, we'll just default to the sans-serif. We're also going to be having two different",
              "displayTime": 115.90158888889
            },
            {
              "text": "weights, and this is really, really useful. Notice in my index when I load the font Quicksand, I load 400 and 700.",
              "displayTime": 121.90158888889
            },
            {
              "text": "So we're going to change those to make a little bit more sense.",
              "displayTime": 132.90158888889
            },
            {
              "text": "We're going to have a font weight called normal and one called heavy.",
              "displayTime": 135.90158888889
            },
            {
              "text": "Normal will be the 400 value, and heavy will be the 700 value. We're also going to have a gutter and",
              "displayTime": 141.90158888889
            },
            {
              "text": "margins, and set that up as well. So I'll create a new variable, let's use $gutter as the variable name,",
              "displayTime": 148.90158888889
            },
            {
              "text": "and then I like to use 2% for my spacing. Simply if you want a tighter look you could use 1%, if you want",
              "displayTime": 157.90158888889
            },
            {
              "text": "more open space, you know, change it to 3 or 4%. Now as soon as I attempt to save this, our CSS preprocessor",
              "displayTime": 166.90158888889
            },
            {
              "text": "is going to look for any mistakes that I may have made, and you can see my little error menu popping up here",
              "displayTime": 172.90158888889
            },
            {
              "text": "reminding me that I forgot to put a semicolon after that one and a semicolon after that one.",
              "displayTime": 177.90158888889
            },
            {
              "text": "So let me save it again, recompile it, this time I get a success with no red warning, so everything's good to go.",
              "displayTime": 183.90158888889
            },
            {
              "text": "At this point there has actually been no change to our CSS because this stuff is all variables,",
              "displayTime": 192.90158888889
            },
            {
              "text": "but we're going to use it right now to make some changes to our menu.",
              "displayTime": 198.90158888889
            },
            {
              "text": "In Photoshop, we can see that this is kind of a light baby blue.",
              "displayTime": 201.90158888889
            },
            {
              "text": "If we take a look at our existing color, we can see this is a darker blue, it's the wrong version of the color.",
              "displayTime": 207.90158888889
            },
            {
              "text": "So let's go back to Dreamweaver, and let's pull up our _mobilemenu, let's jump dump down to line 48 or thereabouts.",
              "displayTime": 214.90158888889
            },
            {
              "text": "Let's change this value from a hardcoded hex value to our variable called $menu-color.",
              "displayTime": 225.90158888889
            },
            {
              "text": "Here on line 64, we have our font-family assigned to Arial, but we want it to match our website,",
              "displayTime": 230.90158888889
            },
            {
              "text": "and if you'll remember, our font family is Quicksand, so let's take this variable and use it instead of Arial",
              "displayTime": 240.90158888889
            },
            {
              "text": "for the $default_font_family. So now we should have two changes coming in to play.",
              "displayTime": 250.90158888889
            },
            {
              "text": "I haven't refreshed the page yet, so this is Arial, and that's the old blue.",
              "displayTime": 254.90158888889
            },
            {
              "text": "Let's hit refresh. There's the new blue, and there's the new font.",
              "displayTime": 259.90158888889
            },
            {
              "text": "While we're messing around with our _mobilemenu, let's make some more changes.",
              "displayTime": 264.90158888889
            },
            {
              "text": "Earlier I promised you that we would switch out the graphics, so if we come up here to line 18 and line 34,",
              "displayTime": 268.90158888889
            },
            {
              "text": "we can see the default graphic provided by the download ZIP file that we had earlier.",
              "displayTime": 279.90158888889
            },
            {
              "text": "We want to change those to menuClose and to menuOpen. So the first one is going to be menuOpen,",
              "displayTime": 287.90158888889
            },
            {
              "text": "and Dreamweaver does a little preview up there for it showing us that it is correct, and this one is changed",
              "displayTime": 298.90158888889
            },
            {
              "text": "to menuClose, mouse over it, and that one's working, so let's save that.",
              "displayTime": 306.90158888889
            },
            {
              "text": "On line 16 we can see that the width of the nav button is 50px, that's the width of this little box right.",
              "displayTime": 313.90158888889
            },
            {
              "text": "Our new graphics don't fit in there, they're way, way too small, so let's double that size from 50 to 100 so",
              "displayTime": 321.90158888889
            },
            {
              "text": "that our button is now twice as wide. There it goes. We can see here on line 21 that the background-size",
              "displayTime": 330.90158888889
            },
            {
              "text": "has been set to a fixed value. We're just going to change that to auto, so it uses the default size of the graphic.",
              "displayTime": 338.90158888889
            },
            {
              "text": "Same thing down here on the line 37 for the close button. We'll take a look at it, and we can see that the",
              "displayTime": 345.90158888889
            },
            {
              "text": "menu icon is now bigger and works nicely. Notice the gap between the edge of the browser and the edge of this button.",
              "displayTime": 352.90158888889
            },
            {
              "text": "As I make my page smaller and larger, it does not change. I want it to be 2%, so it slides in a little bit",
              "displayTime": 362.90158888889
            },
            {
              "text": "as the page gets wide, and then smaller for the phone. Come back here to line 15.",
              "displayTime": 370.90158888889
            },
            {
              "text": "Here we have a left fixed value of 5px. Well if you remember in our variables we used a $gutter of 2%,",
              "displayTime": 378.90158888889
            },
            {
              "text": "and we assigned it a variable name. So let's copy that, let's drop that in place of that hardcoded 5px,",
              "displayTime": 388.90158888889
            },
            {
              "text": "save it, take a look at it, as the page gets wider, the $gutter stays 2%.",
              "displayTime": 398.90158888889
            },
            {
              "text": "Notice when we activate this menu that these buttons are the full width of the page.",
              "displayTime": 406.90158888889
            },
            {
              "text": "On a phone, you know, that looks great, but on a tablet, it's probably a little bit much to have a menu item that big.",
              "displayTime": 411.90158888889
            },
            {
              "text": "So, let's once again return, here on line 46 we have a fixed width for our primary-nav, and this is 100%.",
              "displayTime": 416.90158888889
            },
            {
              "text": "We're just going to change that to a fixed value of 200px. Save it, hit refresh, and now that menu has a",
              "displayTime": 429.90158888889
            },
            {
              "text": "width of 200. We would like this blue to continue all the way across the top, but only at the height of 44px.",
              "displayTime": 436.90158888889
            },
            {
              "text": "We'll take care of that in our _phone-default.css, not inside the _mobilemenu.css.",
              "displayTime": 446.90158888889
            },
            {
              "text": "So we have our _phone-default.scss up, and we've got a spot here for the background color.",
              "displayTime": 454.90158888889
            },
            {
              "text": "And remember we want to use the variable, so I'm going to switch to my variables, and grab the $menu-color",
              "displayTime": 461.90158888889
            },
            {
              "text": "variable, drop it in, save it, refresh, and that menu color is now identical to the menu color over here.",
              "displayTime": 468.90158888889
            },
            {
              "text": "Now this is really cool. So I'm back in my variables, and I decide that I don't want the menu to be blue at all.",
              "displayTime": 479.90158888889
            },
            {
              "text": "Instead, I want it to be orange, so I switch out one variable name, that variable is cascaded throughout my",
              "displayTime": 485.90158888889
            },
            {
              "text": "entire style sheet. So this is orange, and that whole thing is orange.",
              "displayTime": 494.0
            }
          ]
        },
        {
          "title": "Implementing Nesting for the Header",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=4&mode=live",
          "segments": [
            {
              "text": "Now we're going to work on our header using the CSS preprocessor feature of nesting.",
              "displayTime": 0.0
            },
            {
              "text": "We'll return to Dreamweaver. Inside our _phone-default.scss, underneath the HEADER category, we're going to",
              "displayTime": 7.9666666666676
            },
            {
              "text": "kind of block this out. Remember we're going to be nesting these features.",
              "displayTime": 13.9666666666676
            },
            {
              "text": "Start with the header, open curly, come down a ways, and then close curly, and I'm just going to put a",
              "displayTime": 18.9666666666676
            },
            {
              "text": "comment in here, end of header. Now we're going to have a couple of rules for the header itself.",
              "displayTime": 24.9666666666676
            },
            {
              "text": "The first will be padding. Remember padding can take four variables, top, right, bottom, and left.",
              "displayTime": 33.9666666666676
            },
            {
              "text": "We'll do top as 1em, and then we'll do the right side as our variable $gutter so it can be changed,",
              "displayTime": 38.9666666666676
            },
            {
              "text": "and then we'll do a bottom of .5em, and then a left side of $gutter.",
              "displayTime": 47.9666666666676
            },
            {
              "text": "So now we've used our variables inside our nesting, which we'll look at here in a sec.",
              "displayTime": 55.9666666666676
            },
            {
              "text": "We've also go a border-bottom, and it's going to be a solid line, it's going to be 1px tall, and it's going",
              "displayTime": 60.9666666666676
            },
            {
              "text": "to be the color of $ltgrey, once again a variable in play here.",
              "displayTime": 69.9666666666676
            },
            {
              "text": "Save it, make sure we don't get any nasty errors, and we did, it looks like I spelled $ltgrey incorrectly.",
              "displayTime": 74.9666666666676
            },
            {
              "text": "It's hard to type and talk at the same time, we'll try it again, error has gone away.",
              "displayTime": 80.9666666666676
            },
            {
              "text": "Now, that's going to render what you'd typically expect as header, a couple of rules.",
              "displayTime": 86.9666666666676
            },
            {
              "text": "What we want to do though is we want to talk to the h1 and the h2, which live inside the header, and we want",
              "displayTime": 92.9666666666676
            },
            {
              "text": "to preface them with header space, but instead of doing it manually, we're going to nest them in here,",
              "displayTime": 97.9666666666676
            },
            {
              "text": "h1, h2, and here's the rules for those, and then we've got our logo, which has a class of logo,",
              "displayTime": 103.966666666668
            },
            {
              "text": "and then we're going to talk to the logo, which has an image inside of it.",
              "displayTime": 113.966666666668
            },
            {
              "text": "So if we take a look at our HTML, we can see that the logo is a division containing an image, and h1, and h2.",
              "displayTime": 117.966666666668
            },
            {
              "text": "So what do we want to do with the h1 and the h2? Well we simply want to display: none, so they're gone.",
              "displayTime": 126.966666666668
            },
            {
              "text": "The logo we want to float to the left, and we want to set the image with a width of 200px.",
              "displayTime": 133.966666666668
            },
            {
              "text": "We've got to shrink it down for our phone. Now let's take a look at the results, there's our 2% margin,",
              "displayTime": 142.966666666668
            },
            {
              "text": "watch it change as I slide to the left. I've got a 2% margin also here to the right of the social icons.",
              "displayTime": 148.966666666668
            },
            {
              "text": "So that $gutter variable is working beautifully. There's the shrunken graphic, there's the enlarged graphic.",
              "displayTime": 155.966666666668
            },
            {
              "text": "So let's take a look at this code in our exported styles.css. In Koala I've switched it to nested so we can",
              "displayTime": 165.966666666668
            },
            {
              "text": "actually read it. If we scroll down here to the bottom, we can see there's the HEADER section,",
              "displayTime": 172.966666666668
            },
            {
              "text": "there's the header with the rules, and there's the next, notice it has header space h1 and header space h2,",
              "displayTime": 179.966666666668
            },
            {
              "text": "we didn't have to type that, it did it for us. So header's been added in front of each one of these.",
              "displayTime": 186.966666666668
            },
            {
              "text": "Here's what we have so far. Our site looks great on small devices, on medium devices, but once we hit this",
              "displayTime": 193.966666666668
            },
            {
              "text": "breakpoint for desktops, our navigation should appear down here in this space, and it's not.",
              "displayTime": 200.966666666668
            },
            {
              "text": "There's a lot of rules that we're going to be adding to our _desktop.scss file, and rather than making you",
              "displayTime": 205.966666666668
            },
            {
              "text": "watch me type all this stuff and all the potential errors that come with it, I've provided the code for you,",
              "displayTime": 212.966666666668
            },
            {
              "text": "and we're just going to talk about it. It's in your demos in the code.txt file, here's what it looks like.",
              "displayTime": 219.966666666668
            },
            {
              "text": "So here's the rules for the navigation. I have four rules, which apply specifically to the nav.",
              "displayTime": 224.966666666668
            },
            {
              "text": "I'm positioning it relative, I'm changing the blue color to transparent so it's see through, I'm clearing it",
              "displayTime": 231.966666666668
            },
            {
              "text": "to the right so that it floats below my social icons, and then padding it a little bit from the top.",
              "displayTime": 237.966666666668
            },
            {
              "text": "The unordered list, which contains all of my menu items, I'm floating the entire list to the right,",
              "displayTime": 244.966666666668
            },
            {
              "text": "and then I'm floating the list items within that to the left. And then I'm styling all of the buttons.",
              "displayTime": 250.966666666668
            },
            {
              "text": "Here I'm providing a background transition of 0.3s, which is going to slightly darken as I mouse over those,",
              "displayTime": 258.966666666668
            },
            {
              "text": "and then on the active menu item, I'm adding a fat 3px border to the top, once again using the variable $menu-color.",
              "displayTime": 267.966666666668
            },
            {
              "text": "So let's save that, take a look at the results, make sure it's going to work.",
              "displayTime": 277.966666666668
            },
            {
              "text": "There it is floated to the right, see that slight grey color, that's my RGBA, added 0.3s transition,",
              "displayTime": 286.966666666668
            },
            {
              "text": "there's my fat 3px bar for the active menu item. And let's take a look at our styles, should be down near",
              "displayTime": 294.966666666668
            },
            {
              "text": "the bottom, there's our nav. Notice all of these are beautifully nested, each one of them prefaced properly",
              "displayTime": 306.966666666668
            },
            {
              "text": "with a nav at the beginning.",
              "displayTime": 314.966666666668
            }
          ]
        },
        {
          "title": "Building the Footer",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m4&clip=5&mode=live",
          "segments": [
            {
              "text": "Now let's take a look at styling the footer.",
              "displayTime": 0.0
            },
            {
              "text": "Once again we're going to use nesting and variables, so we'll start with footer, open, close, comment here,",
              "displayTime": 4.0
            },
            {
              "text": "end of the footer. Now the footer is going to have a whole bunch of rules, but it's also going to have a",
              "displayTime": 13.5
            },
            {
              "text": "sub-rule of footer anchor for any links that happen to be in there.",
              "displayTime": 19.5653555555566
            },
            {
              "text": "So we'll do an a, open and close. So that's now nested inside of my footer.",
              "displayTime": 22.5653555555566
            },
            {
              "text": "Once again I've provided all of the code for you inside of the demos.ZIP.",
              "displayTime": 29.5653555555566
            },
            {
              "text": "Here's what we have so far, there's my footer, here's all of the default rules, notice I'm missing the color.",
              "displayTime": 33.5653555555566
            },
            {
              "text": "We're going to use the variable $brown for the color of the text, and we also have to use it for the anchor",
              "displayTime": 41.5653555555566
            },
            {
              "text": "color, otherwise the default blue and purple color shows up. Our font-weight is going to be the default,",
              "displayTime": 49.5653555555566
            },
            {
              "text": "the variable of $heavy, which if you'll remember is a value of 700, so let's save that.",
              "displayTime": 54.5653555555566
            },
            {
              "text": "So let's open our styles.css, let's go down to around line 100, there's our complete footer rules,",
              "displayTime": 60.5653555555566
            },
            {
              "text": "and here is the footer anchor rules with footer prefacing it. Take a look at our site, hit refresh,",
              "displayTime": 68.5653555555566
            },
            {
              "text": "there's the footer, the anchor's also brown, and everything looks ready to go.",
              "displayTime": 76.5653555555566
            },
            {
              "text": "In this unit we learned to use variables and nestings to simplify our life as a developer.",
              "displayTime": 84.5653555555566
            },
            {
              "text": "In the next unit, we'll build the first page using operators and inheritance.",
              "displayTime": 89.5653555555566
            }
          ]
        }
      ]
    },
    {
      "title": "Building the Main Rows and Columns",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m5&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m5&clip=0&mode=live",
          "segments": [
            {
              "text": "In the last unit we got a good start on our site by building the header and the footer.",
              "displayTime": 0.0
            },
            {
              "text": "In this unit we are going to create content for the repair page.",
              "displayTime": 6.0
            },
            {
              "text": "Let's take a look at operators, and review nesting and variables.",
              "displayTime": 11.0
            },
            {
              "text": "In order to continue with the natural progression of learning SASS, we are going to rename the index page to",
              "displayTime": 16.0
            },
            {
              "text": "repair.html, and work on that page for the next few lessons. Later we will come back and build a new index page.",
              "displayTime": 22.0
            },
            {
              "text": "You'll notice this change when you download the demos for this unit.",
              "displayTime": 29.0
            },
            {
              "text": "We will use an HTML structure for page layout that is used in may CSS frameworks and content management systems.",
              "displayTime": 34.0
            },
            {
              "text": "First we create a row, which is designed to fill the screen from left to right and float below any previous content.",
              "displayTime": 41.0
            },
            {
              "text": "Within that row, we will create as many columns as our design calls for.",
              "displayTime": 48.0
            },
            {
              "text": "The columns are typically stacked on smaller screens and then displayed next to each other on larger screens.",
              "displayTime": 52.0
            },
            {
              "text": "We frequently talk about mobile first design, meaning that we build the CSS for small screens first,",
              "displayTime": 59.0
            },
            {
              "text": "and then enhance for larger screens. While this is true for CSS, the opposite is true for HTML,",
              "displayTime": 65.0
            },
            {
              "text": "we design the HTML for the largest screen first.",
              "displayTime": 72.0
            },
            {
              "text": "In the example we are about to build, the largest screen will display a full-width page name, which lives in",
              "displayTime": 76.0
            },
            {
              "text": "a row and a column set to full width. Next we have a full paragraph, which is also in a row and a column",
              "displayTime": 81.0
            },
            {
              "text": "set to full width. Finally, we have two side-by-side columns, which fit in one row and two columns.",
              "displayTime": 90.0
            },
            {
              "text": "Well that's enough theory, let's get to work.",
              "displayTime": 97.0
            }
          ]
        },
        {
          "title": "Building the HTML Rows and Columns",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m5&clip=1&mode=live",
          "segments": [
            {
              "text": "Prior to coding, we need to make sure that our CSS preprocessor's up and running.",
              "displayTime": 1.266666666667
            },
            {
              "text": "In this case you can see that I actually have three different projects in process right now.",
              "displayTime": 6.266666666667
            },
            {
              "text": "This first one, Aspen Dental, is the one we are working on, these other two are for other clients.",
              "displayTime": 10.266666666667
            },
            {
              "text": "So with the Koala app running and watching these folders, this is what we have so far, we've got our header,",
              "displayTime": 15.266666666667
            },
            {
              "text": "footer, and nothing here yet. If we go to our text editor, which in my case is Dreamweaver, you can see the",
              "displayTime": 21.266666666667
            },
            {
              "text": "nothing here yet, and we can delete that. Now inside our opening and closing main is where all the content",
              "displayTime": 29.266666666667
            },
            {
              "text": "for our page is going to live. Let's start by creating an open div and a closing div.",
              "displayTime": 36.266666666667
            },
            {
              "text": "Now this one will be a row, so class = row, and then I like to tag all of my closing ones so that I don't",
              "displayTime": 44.266666666667
            },
            {
              "text": "forget what they're related to. Within our opening row is our page title, so it's going to be a single column.",
              "displayTime": 52.266666666667
            },
            {
              "text": "In addition to the class of column, which is going to have some padding and stuff assigned to it,",
              "displayTime": 61.266666666667
            },
            {
              "text": "we're also going to have another class called width, and the number associated with this class is going to be",
              "displayTime": 65.266666666667
            },
            {
              "text": "the number out of 12. I'm using a 12 column grid, so a column that I have designated as a width of 12 is",
              "displayTime": 73.266666666667
            },
            {
              "text": "going to take all 12 columns, or in other words full width or 100%.",
              "displayTime": 80.266666666667
            },
            {
              "text": "Inside this column, we're going to have an h1 with Repair Options that will be the page title.",
              "displayTime": 86.266666666667
            },
            {
              "text": "And we could put the paragraph immediately under that, that's one way to do it, and it would be fine as long",
              "displayTime": 97.266666666667
            },
            {
              "text": "as we always wanted that paragraph to be full width, or we could do as I described in the PowerPoint,",
              "displayTime": 103.266666666667
            },
            {
              "text": "and create a second row column combination, and change this to a paragraph.",
              "displayTime": 112.266666666667
            },
            {
              "text": "I've got the text for that already set up, it's in the demos.ZIP file, let's copy it, and drop it in.",
              "displayTime": 120.266666666667
            },
            {
              "text": "Now we have our page title and our opening paragraph. We're now ready for several subtopics, so these will be h2s.",
              "displayTime": 127.266666666667
            },
            {
              "text": "Let's go ahead and copy our row column combination up here. Instead of an h1, we're going to have an h2,",
              "displayTime": 134.266666666667
            },
            {
              "text": "and this will be called Bridges. This time let's go ahead and put the paragraph with this because it's also",
              "displayTime": 141.266666666667
            },
            {
              "text": "going to be 12/12 columns, so we can see it done both ways. This will be a paragraph like that.",
              "displayTime": 153.266666666667
            },
            {
              "text": "So let's save it, and take a look at our work thus far. Nothing here yet, let's hit refresh, we now have our",
              "displayTime": 164.266666666667
            },
            {
              "text": "page title un-styled, the paragraph, our h2, there'll be several h2s on this page, and then the description of bridges.",
              "displayTime": 170.266666666667
            },
            {
              "text": "Now we're ready to go into the advantages and disadvantages of bridges.",
              "displayTime": 179.266666666667
            },
            {
              "text": "So in this case we want to set up a multiple column, so we'll still have the row, but the column part will be different.",
              "displayTime": 185.266666666667
            },
            {
              "text": "So I'm going to start with this simple one up here, we'll paste it, remove the h1, and instead of the column",
              "displayTime": 194.266666666667
            },
            {
              "text": "being a width of 12, it's going to be 6/12, or in other words 50%.",
              "displayTime": 202.266666666667
            },
            {
              "text": "We've got one column and a second column, both living inside of a single row.",
              "displayTime": 207.266666666667
            },
            {
              "text": "On a small screen, these two columns will be stacked top to bottom.",
              "displayTime": 214.266666666667
            },
            {
              "text": "On wider screens, this column will take the left side, and this column will take the right side.",
              "displayTime": 217.266666666667
            },
            {
              "text": "Once again I have some text there for you in the demos. We have Advantages, which there are three of,",
              "displayTime": 224.266666666667
            },
            {
              "text": "and there are Disadvantages, which there are also three of. The Advantages will be h3s, and then each of",
              "displayTime": 234.266666666667
            },
            {
              "text": "these are going to be a list item, and so I'm going to style them with paragraph tags, and then I'm going to",
              "displayTime": 249.266666666667
            },
            {
              "text": "use one of the only affects I use from the design view of Dreamweaver, and that is to take these 3,",
              "displayTime": 262.266666666667
            },
            {
              "text": "and format them as an unordered list, so that when I go back to my code view, I can see that I have a ul with",
              "displayTime": 270.0
            },
            {
              "text": "3 list items in each case. Save that, take a look at it, there's the Advantages and the Disadvantages.",
              "displayTime": 281.266666666667
            },
            {
              "text": "Now we're ready to use some CSS to make this look nice.",
              "displayTime": 290.266666666667
            }
          ]
        },
        {
          "title": "Styling the Text Using Nesting and Variables",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m5&clip=2&mode=live",
          "segments": [
            {
              "text": "Let's now open our phone because we're going to start by designing the small screens,",
              "displayTime": 0.0
            },
            {
              "text": "and then make modifications on the larger screens. Down here in the main area of the page, you can see it's completely empty.",
              "displayTime": 7.0
            },
            {
              "text": "We're going to use a CSS preprocessor feature of nesting, so we'll start by doing a main, open, come down a",
              "displayTime": 15.533333333334
            },
            {
              "text": "ways, close it, and then put a comment that says this is the end of main.",
              "displayTime": 23.533333333334
            },
            {
              "text": "Within main, there's a couple of rules that we need to have. Thanks to Internet Explorer, we have to have a",
              "displayTime": 34.0
            },
            {
              "text": "display of block in order for main to function properly on that browser, all other browsers, of course, works great.",
              "displayTime": 38.533333333334
            },
            {
              "text": "The second thing we want to do with main is set a min-height, and I'll just choose 25em.",
              "displayTime": 50.533333333334
            },
            {
              "text": "So that's the end of rules for main. Now within main, we want to have some rules for h1, and h2, and h3.",
              "displayTime": 58.533333333334
            },
            {
              "text": "So I'm going to do some copy paste to speed this up a little bit.",
              "displayTime": 68.533333333334
            },
            {
              "text": "Each of these headings are going to have basically the four same things.",
              "displayTime": 70.533333333334
            },
            {
              "text": "We'll have a font-size, we're going to have a color, we're going to have padding at the top to push them away",
              "displayTime": 75.533333333334
            },
            {
              "text": "from previous elements, and we'll have a font-weight. So let's take the rules for our h1, and we use the",
              "displayTime": 85.533333333334
            },
            {
              "text": "same 4 things for h2, same 4 things for h3, and actually our paragraph will have the same 4 things as well.",
              "displayTime": 96.533333333334
            },
            {
              "text": "Now the h1, we'll give it a font-size of 3em, for h2 we'll drop it down to 2em, and for our h3,",
              "displayTime": 108.533333333334
            },
            {
              "text": "we'll do 1.5em, and for the paragraph, we'll just leave it at 1em.",
              "displayTime": 116.533333333334
            },
            {
              "text": "This is not really necessary, but I like to put it just to keep everything consistent.",
              "displayTime": 123.533333333334
            },
            {
              "text": "Now the color of our h1, if we go back to our variables, I have created a variable for h1_color,",
              "displayTime": 129.533333333334
            },
            {
              "text": "h2 or heading 2, and h3 heading 3 color. I already had a variable for text-color, so we're going to use",
              "displayTime": 138.533333333334
            },
            {
              "text": "these variable names inside of our phone-default. So the heading 1 will be the $h1_color, this will be the",
              "displayTime": 146.533333333334
            },
            {
              "text": "$h2_color, and this will be the $h3_color. And the paragraph is going to be the text color.",
              "displayTime": 158.533333333334
            },
            {
              "text": "So now that we've assigned the font-size and the color, now we'll do some padding.",
              "displayTime": 171.533333333334
            },
            {
              "text": "For the h1 let's do 0.75em, for the h2 we'll drop it down to 0.5em, and we'll leave the h3 at 0.5em,",
              "displayTime": 176.533333333334
            },
            {
              "text": "and the paragraph 0.4em. Now the font-weight, remember font-weights are also listed in our variable,",
              "displayTime": 190.533333333334
            },
            {
              "text": "so we have $normal, and we have $heavy. I want all of the headings to be $heavy.",
              "displayTime": 198.533333333334
            },
            {
              "text": "So h1 font-weight, font-weight, and then this one will be $normal.",
              "displayTime": 207.533333333334
            },
            {
              "text": "The paragraphs are a little bit smashed together. I like to have spacing between the lines.",
              "displayTime": 216.533333333334
            },
            {
              "text": "In print this is called leading, in the web it's called line height.",
              "displayTime": 222.533333333334
            },
            {
              "text": "So let's go back, and for the paragraph, let's add line-height of 130%.",
              "displayTime": 228.533333333334
            },
            {
              "text": "Almost every font that I use, I have to add line height because they're designed too tight together.",
              "displayTime": 240.533333333334
            },
            {
              "text": "So let's save that, keep an eye on this when I hit refresh, see it space out just a little bit, it makes it a",
              "displayTime": 247.533333333334
            },
            {
              "text": "little bit easier to read. Now there's a couple more things that I'll be adding later in my other pages,",
              "displayTime": 254.533333333334
            },
            {
              "text": "and one is going to be bold or strong, and the other's going to be the anchor color.",
              "displayTime": 262.533333333334
            },
            {
              "text": "So strong is going to have a font-weight of heavy, and my anchor is going to have a color, and if we come",
              "displayTime": 271.533333333334
            },
            {
              "text": "back to our variables, I can see that I've already defined a link-color.",
              "displayTime": 285.533333333334
            },
            {
              "text": "Now even though these two are not currently being used, I anticipate that they will be used, and so I'm",
              "displayTime": 293.533333333334
            },
            {
              "text": "putting them inside of my main so that they're already to go, let's save that.",
              "displayTime": 299.533333333334
            },
            {
              "text": "These two lists for Advantages and Disadvantages are not styled at the current time.",
              "displayTime": 306.533333333334
            },
            {
              "text": "We're going to do that in another unit. For now though, we want to set them up to display stacked on small",
              "displayTime": 312.533333333334
            },
            {
              "text": "screens and side-by-side on larger screens, and we'll do that next.",
              "displayTime": 318.533333333334
            }
          ]
        },
        {
          "title": "Styling the Columns Using Nesting and Operations",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m5&clip=3&mode=live",
          "segments": [
            {
              "text": "Before we do this next part, I want to show you the problem that we're trying to solve.",
              "displayTime": 0.0
            },
            {
              "text": "While this looks great on a really wide screen, as I shrink my screen down, you'll notice that the text",
              "displayTime": 6.5
            },
            {
              "text": "actually touches on the left side and the right side of my screen.",
              "displayTime": 10.5
            },
            {
              "text": "That's an unacceptable design, it looks really bad, so we're going to add some padding to push this away so",
              "displayTime": 15.933333333334
            },
            {
              "text": "that it lines up with the menu button and the left side of our logo, which is 2%, as described by our $gutter variable.",
              "displayTime": 21.933333333334
            },
            {
              "text": "So let's go back to Dreamweaver. We have our MAIN section up here, and I could add these rules to main,",
              "displayTime": 29.933333333334
            },
            {
              "text": "but I'd like to keep my CSS a little bit separated so I can make sense of it.",
              "displayTime": 36.933333333334
            },
            {
              "text": "So I'm going to add a new category called COLUMNS, and inside there I'm going to set up a new main,",
              "displayTime": 43.933333333334
            },
            {
              "text": "open and close, and within main we're going to have two rules that are nested, one will be a .row,",
              "displayTime": 48.933333333334
            },
            {
              "text": "the second will be the column. The row is going to have a clear both, it's all it's going to do,",
              "displayTime": 61.933333333334
            },
            {
              "text": "make sure all rows stack below previous rows. The column, we're going to do padding, and we're going to set",
              "displayTime": 71.933333333334
            },
            {
              "text": "the top and bottom padding to 0 because we've handled padding in our main area up above with the paragraphs",
              "displayTime": 83.933333333334
            },
            {
              "text": "and the headings, but we do want to set our side padding to the variable defined here as $gutter, which is 2%.",
              "displayTime": 88.933333333334
            },
            {
              "text": "We'll save that. Our CSS preprocessor's already done its magic, so we hit refresh, and we can see that pop",
              "displayTime": 101.933333333334
            },
            {
              "text": "over 2% gap on the left side, 2% gap on the right side. So we've just taken care of the phone version,",
              "displayTime": 108.933333333334
            },
            {
              "text": "which sort of looks like this once you muck it up. Now let's open up our tablet partial, and we'll create a",
              "displayTime": 116.933333333334
            },
            {
              "text": "new section also for columns, and we'll have main. And this time we're going to talk to the width of 6.",
              "displayTime": 122.933333333334
            },
            {
              "text": "So width6, we'll set to float to the left. Next we need width.",
              "displayTime": 135.933333333334
            },
            {
              "text": "Now each of these is supposed to be half, so we could do 50%, and in this case that would probably be a whole",
              "displayTime": 145.933333333334
            },
            {
              "text": "lot easier, but the point of this lesson is to demonstrate CSS operations because you may find an instance",
              "displayTime": 151.933333333334
            },
            {
              "text": "later where this is not the simplest solution. So in this case we have a 12 column grid that we're working with.",
              "displayTime": 157.933333333334
            },
            {
              "text": "This particular column is supposed to take 6 of the 12 columns.",
              "displayTime": 165.933333333334
            },
            {
              "text": "Let's take a look at it, and we can see that Advantages is not half, and Disadvantages is not half.",
              "displayTime": 171.933333333334
            },
            {
              "text": "They're just taking up the space that they need. So let's inspect those.",
              "displayTime": 180.933333333334
            },
            {
              "text": "We're looking for the division width of 6. We can see here that we do have a width of 6/12, but the invalid",
              "displayTime": 185.933333333334
            },
            {
              "text": "property value warning is up because 6/12 is not a valid width, 6/12 is actually 0.5, so let's times that by",
              "displayTime": 194.933333333334
            },
            {
              "text": "100 so that 0.5 becomes 50. Save it, let's try it one more time, we'll refresh it.",
              "displayTime": 204.933333333334
            },
            {
              "text": "Once again we're looking at width6. Now we have a width of 50, but it's still invalid because it's missing the value.",
              "displayTime": 212.933333333334
            },
            {
              "text": "It needs to be 50px, 50em, 50% something, so let's come back to our code, and we'll add the percent sign,",
              "displayTime": 221.933333333334
            },
            {
              "text": "so it has a unit value, save that, refresh it again, and now our width column 6 has a valid value of 50%,",
              "displayTime": 229.933333333334
            },
            {
              "text": "and each of these is now taking half the page. Now that's great.",
              "displayTime": 240.933333333334
            },
            {
              "text": "We could do 4/12 columns, and without doing any math in our head, we automatically have 33.3333%, so a third",
              "displayTime": 244.933333333334
            },
            {
              "text": "Advantages, Disadvantages, whatever would fit right there beautifully.",
              "displayTime": 256.933333333334
            },
            {
              "text": "We'll go ahead and put that back to 6, and now you know a little bit about operations in a CSS preprocessor.",
              "displayTime": 258.933333333334
            },
            {
              "text": "Well now you've seen examples of operators, as well as another look at nesting and variables.",
              "displayTime": 269.933333333334
            },
            {
              "text": "In the next unit we will build a tabbed to navigation using inheritance.",
              "displayTime": 273.933333333334
            }
          ]
        }
      ]
    },
    {
      "title": "Building the Tabbed Navigation",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m6&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m6&clip=0&mode=live",
          "segments": [
            {
              "text": "In the last unit we created the repair page using operations, nesting, and variables.",
              "displayTime": 0.0
            },
            {
              "text": "In this unit we will use extend or inheritance to create a tabbed navigation.",
              "displayTime": 8.0
            },
            {
              "text": "We'll also review variables.",
              "displayTime": 13.0
            },
            {
              "text": "So here's where we're headed. Notice that I have finished filling in the repair page with these three",
              "displayTime": 15.0
            },
            {
              "text": "additional dental repair options. In this unit, we will be adding the within page navigation tabs that",
              "displayTime": 20.0
            },
            {
              "text": "scroll to different parts of the repair page. The active tab looks the other three with minor changes.",
              "displayTime": 27.0
            },
            {
              "text": "We will be using extend to accomplish this task.",
              "displayTime": 35.0
            },
            {
              "text": "Inheritance can work in a couple of different ways. Let's demonstrate using an anchor styled like a button.",
              "displayTime": 38.0
            },
            {
              "text": "In this case the anchor is green. Next we create a new class for the second button, which will look very",
              "displayTime": 45.0
            },
            {
              "text": "much like the green button. We will copy all the features of the green button using @extend.",
              "displayTime": 53.0
            },
            {
              "text": "Then we'll change the background color to red. The background color red overrides the background color green.",
              "displayTime": 59.0
            },
            {
              "text": "The resulting CSS looks like this. Notice that both button green and button red are combined in the first",
              "displayTime": 66.0
            },
            {
              "text": "set of rules. The button red then overrides the previous background color.",
              "displayTime": 73.0
            },
            {
              "text": "The second way to implement inheritance is to use a placeholder.",
              "displayTime": 80.0
            },
            {
              "text": "A placeholder is a percent sign, and it replaces the dot that we use for a class designation.",
              "displayTime": 83.0
            },
            {
              "text": "You put all the rules that are the same for both buttons in a selector that starts with a percent sign",
              "displayTime": 89.0
            },
            {
              "text": "instead of a dot. We will call this %button_default. This block of code will not render into CSS unless",
              "displayTime": 94.0
            },
            {
              "text": "it's extended into another selector. Next we create two selectors, one for the green class and one for the red class.",
              "displayTime": 102.0
            },
            {
              "text": "These both extend the default class and then add their own background color.",
              "displayTime": 113.0
            },
            {
              "text": "The final code still uses a multiple class selector, but it only contains the common characteristics.",
              "displayTime": 118.5
            },
            {
              "text": "The differences are then separated into their own classes, which add to the previous selector.",
              "displayTime": 125.0
            },
            {
              "text": "I prefer the second solution, as it makes more sense when reading the CSS.",
              "displayTime": 132.0
            },
            {
              "text": "So let's go build something.",
              "displayTime": 136.0
            }
          ]
        },
        {
          "title": "Building the Navigation in HTML",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m6&clip=1&mode=live",
          "segments": [
            {
              "text": "Let's make sure our CSS preprocessor is up and running. Let's take a look at our repair.html page.",
              "displayTime": 1.066666666667
            },
            {
              "text": "The demos file reflects several changes from our last unit. In addition to the Bridges with Advantages and",
              "displayTime": 9.066666666667
            },
            {
              "text": "Disadvantages, I've also added Partials, Replacements, and Implants, so there's a total of four sections on",
              "displayTime": 14.066666666667
            },
            {
              "text": "the repair options page. Here on line 93 is the repair options page heading, then we've got a quick description.",
              "displayTime": 20.066666666667
            },
            {
              "text": "Down here on line 108 is where the actual content that we're concerned about starts.",
              "displayTime": 29.066666666667
            },
            {
              "text": "Notice on line 106 we have added to the row an id of bridge. This allows us to target with an anchor to move",
              "displayTime": 34.066666666667
            },
            {
              "text": "to that portion of the page. Each of the other three sections have similar ids, all the way down to line",
              "displayTime": 44.066666666667
            },
            {
              "text": "211 where we have an id of implants. In your demos.ZIP I have provided four anchors, which are already set",
              "displayTime": 50.066666666667
            },
            {
              "text": "up to link to each of these. So let's scroll up to the top one, inside of the row, inside of the full-width",
              "displayTime": 58.066666666667
            },
            {
              "text": "column, we're going to hit Return a few times, and then we're going to paste the code that was provided in",
              "displayTime": 65.066666666667
            },
            {
              "text": "the demos.ZIP. Notice there's a href to each of the four links on this page.",
              "displayTime": 71.066666666667
            },
            {
              "text": "There's also a class. We have a subnav-active and then three subnav-links.",
              "displayTime": 77.066666666667
            },
            {
              "text": "These will be styled differently than this top one. Then I've sort of done something different here,",
              "displayTime": 84.066666666667
            },
            {
              "text": "I've broken up the link names, so the link name of bridges is broken up so that I'm going to hide on phones",
              "displayTime": 90.066666666667
            },
            {
              "text": "all but four of the letters, and we'll take a look at that more in a minute.",
              "displayTime": 101.066666666667
            },
            {
              "text": "So there's the first one in place, let's scroll down to the second one, which is dentures.",
              "displayTime": 105.066666666667
            },
            {
              "text": "Once again, inside the column, before the name of the h2, let's paste it.",
              "displayTime": 112.066666666667
            },
            {
              "text": "We now need to change this link to link, and change this one to active, since we will be at partial dentures,",
              "displayTime": 120.066666666667
            },
            {
              "text": "and partial dentures will be the link we just clicked on. Down here on replace, just inside the column,",
              "displayTime": 130.066666666667
            },
            {
              "text": "paste it again, we're looking for replacement, here's replacement, change the word link to active,",
              "displayTime": 142.066666666667
            },
            {
              "text": "and then we'll style this one as a regular link, and then implants is our final one, so our implants link",
              "displayTime": 154.066666666667
            },
            {
              "text": "will be styled as the active-link, and we'll change this back to a regular link.",
              "displayTime": 163.066666666667
            },
            {
              "text": "So with that in place, let's take a look at what we've got. Here's the four links, if I click Bridges,",
              "displayTime": 171.066666666667
            },
            {
              "text": "it scrolls to Bridges, if I click Partial Dentures, that becomes the top, Replacements,",
              "displayTime": 178.066666666667
            },
            {
              "text": "Replacements won't slide up because our page is too small. So let's shrink it down, go back to Bridges,",
              "displayTime": 184.066666666667
            },
            {
              "text": "notice there's Bridges, Partial Dentures. So this is working as a within page navigation, just doesn't look",
              "displayTime": 190.066666666667
            },
            {
              "text": "very nice at this point.",
              "displayTime": 198.5
            }
          ]
        },
        {
          "title": "Styling the Navigation Using Inheritance/Extend",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m6&clip=2&mode=live",
          "segments": [
            {
              "text": "Now that we have the HTML taken care of, and we've got places for two classes,",
              "displayTime": 0.0
            },
            {
              "text": "one called link and one called active, let's now jump to our phone-default partial, and do some coding.",
              "displayTime": 7.733333333334
            },
            {
              "text": "Down here under the main section, I'm going to add a new section for SUB NAV.",
              "displayTime": 18.0
            },
            {
              "text": "Now this is going to be blocked out. Remember we're using the second approach I showed you in the PowerPoint.",
              "displayTime": 27.0
            },
            {
              "text": "So we're going to start with a placeholder, and we'll just title it subnav, open curly, have a bunch of",
              "displayTime": 33.733333333334
            },
            {
              "text": "rules, and close that one off. Then we're going to have a class selector called subnav-link, and it will",
              "displayTime": 41.733333333334
            },
            {
              "text": "have some additional rules, and then we'll have a subnav-link, and then when they put the mouse over it,",
              "displayTime": 53.733333333334
            },
            {
              "text": "we'll use the pseudo class hover, and style that a little bit different.",
              "displayTime": 65.733333333334
            },
            {
              "text": "Then we'll have a .subnav-active. Now each of these three are going to extend to this one up here.",
              "displayTime": 71.733333333334
            },
            {
              "text": "So let's start with @extend, and then we'll use a percent because it's a placeholder, %subnav.",
              "displayTime": 82.733333333334
            },
            {
              "text": "Alright let's try this thing out. Let's start by setting the background-color to a nasty purple color.",
              "displayTime": 99.733333333334
            },
            {
              "text": "Let's open our browser, hit refresh, and that nasty purple color is working on all of our buttons.",
              "displayTime": 111.733333333334
            },
            {
              "text": "So, let's come down to the hover now, let's add a rule for hover.",
              "displayTime": 119.733333333334
            },
            {
              "text": "Set the background-color to pink. Hit refresh, and now our link is switching from purple to pink on hover.",
              "displayTime": 124.733333333334
            },
            {
              "text": "Now there's a lot of rules that actually go up here with the basic button styling.",
              "displayTime": 137.733333333334
            },
            {
              "text": "I've provided those rules for you in the demos.ZIP, and here they are.",
              "displayTime": 141.733333333334
            },
            {
              "text": "Let's delete that. Because it's an anchor, we must first display it as a block.",
              "displayTime": 145.733333333334
            },
            {
              "text": "We're going to float all of these buttons to the left. The idea is when we're done, that all four will fit",
              "displayTime": 153.733333333334
            },
            {
              "text": "on a screen from phone all the way up to a large desktop, and they'll each take 25% of the available space.",
              "displayTime": 158.733333333334
            },
            {
              "text": "Then we're going to style them with some space outside, some space inside, we'll set the color to $dkgrey",
              "displayTime": 167.733333333334
            },
            {
              "text": "using a variable, we'll put a border around it using a variable, we'll turn off the default underline.",
              "displayTime": 174.733333333334
            },
            {
              "text": "And then look at border-radius, 10px on the top-left corner, 10px on the top-right corner as square corner",
              "displayTime": 184.733333333334
            },
            {
              "text": "bottom-right, as square corner bottom-left, and then we're going to do a transition, which means the",
              "displayTime": 192.733333333334
            },
            {
              "text": "background-color is going to change over half of a second. What are the characteristics now of our subnav?",
              "displayTime": 197.733333333334
            },
            {
              "text": "Well first of all, it contains all of this stuff, plus we want the background-color to be a variable of $ltgrey.",
              "displayTime": 205.733333333334
            },
            {
              "text": "That's it. The hover color, instead of being a nasty pink color, is going to be our variable of $orange.",
              "displayTime": 215.733333333334
            },
            {
              "text": "Our active state is going to have a background-color, once again it will be a variable of $blue.",
              "displayTime": 224.733333333334
            },
            {
              "text": "Let's take a look at it, refresh, there's our round corners on the top-right, top-left, square corners on the bottom.",
              "displayTime": 234.733333333334
            },
            {
              "text": "There's our hover color to orange. Notice this one doesn't hover because I've set it up as the active one,",
              "displayTime": 242.733333333334
            },
            {
              "text": "only these hover, indicating their click-ability. When I click a non-active one, it takes me to that part of the page.",
              "displayTime": 249.733333333334
            },
            {
              "text": "In large screen they're taking 25%, they're looking great. Medium screens are also looking great.",
              "displayTime": 257.733333333334
            },
            {
              "text": "Small screens are not working very well. There's just too much information here to fit on a screen that has",
              "displayTime": 263.733333333334
            },
            {
              "text": "a width of 320px. So that's where we get into that weird link name that I showed you earlier.",
              "displayTime": 269.733333333334
            },
            {
              "text": "Let's go back to repair. If I shorten each of these to four letters, they'll actually fit on a small phone.",
              "displayTime": 278.733333333334
            },
            {
              "text": "So I'm going to hide the hideSmall class. So let's go back to phone-default, display none, it's gone.",
              "displayTime": 285.733333333334
            },
            {
              "text": "Save it, let's preview it. The four letter links are working great on a very narrow screen.",
              "displayTime": 304.733333333334
            },
            {
              "text": "As I widen it out though, I have room for the full name, I need to turn that back on.",
              "displayTime": 312.733333333334
            },
            {
              "text": "Let's open up our tablet-partial.scss file, and under the subnav category, instead of displaying these as",
              "displayTime": 317.733333333334
            },
            {
              "text": "none, we'll display them as inline. Save it, hit refresh, and now our link names are showing up full width",
              "displayTime": 326.733333333334
            },
            {
              "text": "on large, medium, and on small they're shrunk to four characters.",
              "displayTime": 337.733333333334
            },
            {
              "text": "If we open up styles.css, and we scroll down to around line 130 something, we can see the output where",
              "displayTime": 343.733333333334
            },
            {
              "text": "subnav-link, and subnav-link hover, and subnav-active all share the same set of characteristics.",
              "displayTime": 353.733333333334
            },
            {
              "text": "And then we have the link, and the hover, and the active each having their own separate background color.",
              "displayTime": 363.733333333334
            },
            {
              "text": "And of course there's the hideSmall, which has a little different purpose.",
              "displayTime": 370.733333333334
            },
            {
              "text": "There's one more thing here that's kind of bugging me, and that is this space between our h2 and the sub",
              "displayTime": 374.733333333334
            },
            {
              "text": "navigation elements above it. It's a little bit too tight. So to fix that problem, we need to go into our",
              "displayTime": 381.733333333334
            },
            {
              "text": "editor, go to our phone-default, and find the h2, and we need to tell the h2 to clear both, which means stay",
              "displayTime": 386.733333333334
            },
            {
              "text": "below those buttons so that your padding top functions correctly.",
              "displayTime": 397.733333333334
            },
            {
              "text": "Save it, return to our browser, reload it, and now we've got a nice space between the tops of these and the",
              "displayTime": 404.733333333334
            },
            {
              "text": "navigation links above them.",
              "displayTime": 413.733333333334
            },
            {
              "text": "Well now you've seen examples of inheritance using extend, as well as a review of variables.",
              "displayTime": 415.733333333334
            },
            {
              "text": "Next we'll use mixins to style our Advantages and Disadvantages lists.",
              "displayTime": 420.733333333334
            }
          ]
        }
      ]
    },
    {
      "title": "Style Lists with Custom Bullets ",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m7&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m7&clip=0&mode=live",
          "segments": [
            {
              "text": "In the last unit we created tabbed navigation using extend and variables.",
              "displayTime": 0.0
            },
            {
              "text": "Since I'm still committed to getting you to use a CSS preprocessor, let's take a look at mixins.",
              "displayTime": 7.0
            },
            {
              "text": "As we look at the agenda for this unit, take a look at everything you've learned so far.",
              "displayTime": 13.0
            },
            {
              "text": "In this unit we will focus on mixins.",
              "displayTime": 18.0
            },
            {
              "text": "Our mixin is going to allow us to style these two lists, which share CSS declarations.",
              "displayTime": 21.0
            },
            {
              "text": "The only real difference is the graphic used for the bullet.",
              "displayTime": 26.0
            },
            {
              "text": "As we move through this unit, you may ask yourself if we could've done this with inheritance or extend,",
              "displayTime": 29.0
            },
            {
              "text": "and the answer is yes, but I want to show you mixins because they do things different, and then you can",
              "displayTime": 35.0
            },
            {
              "text": "decide which one works best for you.",
              "displayTime": 41.0
            },
            {
              "text": "A mixin lets you create groups of CSS declarations that belong together.",
              "displayTime": 43.0
            },
            {
              "text": "A mixin is designed to be reused over and over.",
              "displayTime": 47.0
            },
            {
              "text": "Here is an example of reusable code for rounding the corners. Notice that I have included all the vendor",
              "displayTime": 52.0
            },
            {
              "text": "prefixes to make sure it works on as many browsers as possible.",
              "displayTime": 58.0
            },
            {
              "text": "Here's the code for a blue next button, and here's the code for a green previous button.",
              "displayTime": 62.0
            },
            {
              "text": "Here's the final output in our CSS.",
              "displayTime": 69.0
            },
            {
              "text": "Let's try a mixin on our dental website to style a list item. Remember in unit one we exported the graphics",
              "displayTime": 72.0
            },
            {
              "text": "for these lists using Photoshop to generate assets.",
              "displayTime": 79.0
            }
          ]
        },
        {
          "title": "Styling the Lists with Mixins",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m7&clip=1&mode=live",
          "segments": [
            {
              "text": "So here's our Repair Options page. We have Advantages listed here on the left side and Disadvantages listed",
              "displayTime": 2.0333333333333
            },
            {
              "text": "on the right side. Each of these is an unordered list with three or four list items.",
              "displayTime": 8.0333333333333
            },
            {
              "text": "Let's take a look at our code. Here's the Advantages, and down here's the Disadvantages.",
              "displayTime": 13.0333333333333
            },
            {
              "text": "The unordered list currently does not have a class, so we're going to set up class=, and this first one are",
              "displayTime": 18.0333333333333
            },
            {
              "text": "the Advantages, so we'll set that up as class yes, and then we'll come down to the Disadvantages, class= no.",
              "displayTime": 25.0333333333333
            },
            {
              "text": "So now that we've assigned those two, I'll go ahead and assign those to the other three items in our web page.",
              "displayTime": 36.0333333333333
            },
            {
              "text": "Now that our classes are all set up, we can jump back to our CSS.",
              "displayTime": 44.0333333333333
            },
            {
              "text": "With our phone-default partial opened, let's start by creating the mixin.",
              "displayTime": 49.0333333333333
            },
            {
              "text": "The mixin has to have name, open curly, and close curly. Now let's create two classes.",
              "displayTime": 57.0333333333333
            },
            {
              "text": "The first one is an unordered list, which has a class name list-check-yes, and we're going to talk to the",
              "displayTime": 65.0333333333333
            },
            {
              "text": "list items within that unordered list, and the first thing we're going to do is @include all the rules from the mixin.",
              "displayTime": 75.0333333333333
            },
            {
              "text": "So the mixin name, followed by a semicolon. Now the checklist for no is identical with one simple change,",
              "displayTime": 89.0333333333333
            },
            {
              "text": "and that is the yes becomes a no. Now at this point we have nothing styled, so let's start by adding a",
              "displayTime": 101.033333333333
            },
            {
              "text": "background-image, and we're going to find check1 in the images folder.",
              "displayTime": 109.033333333333
            },
            {
              "text": "In our no list, we'll also have a background-image, and it's going to be check2, which is an X.",
              "displayTime": 118.033333333333
            },
            {
              "text": "Let's switch to our browser, and this is what we have so far. That background is being repeated horizontally and vertically.",
              "displayTime": 131.033333333333
            },
            {
              "text": "So both the Advantages and the Disadvantages need to have the background repeat set to no-repeat.",
              "displayTime": 138.033333333333
            },
            {
              "text": "Because we're using a mixin, we can do this with one command instead of two.",
              "displayTime": 144.033333333333
            },
            {
              "text": "So up here on the mixin, we'll add no-repeat, save it, hit refresh, and it's now been applied to both the",
              "displayTime": 149.033333333333
            },
            {
              "text": "left and the right sides. Now the checkmark graphic is currently overlapping our list item text.",
              "displayTime": 162.033333333333
            },
            {
              "text": "Let's add some padding, and we're going to space these apart from each other, as well as slide the text in.",
              "displayTime": 170.033333333333
            },
            {
              "text": "So let's do 0.5em down, the right doesn't need any, the bottom will match with 0.5em, and the left side will",
              "displayTime": 177.033333333333
            },
            {
              "text": "kick over 1.5em to make room for the graphic. So now you can see that the text is now being kicked to the",
              "displayTime": 187.033333333333
            },
            {
              "text": "right in both cases. Now this one, you can see the checkmarks are looking a little bit too high.",
              "displayTime": 195.033333333333
            },
            {
              "text": "Over here when you've got a double line, the graphic is really too high, so we need to slide that down so it's centered.",
              "displayTime": 201.033333333333
            },
            {
              "text": "So once again, in our mixin, we'll set the background-position to left, which is default, and then center,",
              "displayTime": 208.033333333333
            },
            {
              "text": "which is going to slide it down to the middle. Let's refresh that, that kicks it down.",
              "displayTime": 224.033333333333
            },
            {
              "text": "Now the checkmark is currently lined up with the left edge of the A, and the X is lined up with the left edge",
              "displayTime": 229.033333333333
            },
            {
              "text": "of the D, that would be okay, but I'm going to add an additional rule for margin-left, and I'm going to kick",
              "displayTime": 235.033333333333
            },
            {
              "text": "it over 1em, so it's indented a little bit. Just add a little bit more styling to the page.",
              "displayTime": 243.033333333333
            },
            {
              "text": "So refresh that, and now you can see those are kicked over nicely.",
              "displayTime": 249.033333333333
            },
            {
              "text": "Let's open our output. Here on line 157 we start the LISTS code, you can see that all of these common rules",
              "displayTime": 253.033333333333
            },
            {
              "text": "are repeated here, and then the difference is up here in the checkmark being used.",
              "displayTime": 261.033333333333
            },
            {
              "text": "So that was a quick example of a mixin. Next we're going to pass values to mixin to make it more useful.",
              "displayTime": 267.033333333333
            },
            {
              "text": "Trust me, you're going to love this one.",
              "displayTime": 273.033333333333
            }
          ]
        }
      ]
    },
    {
      "title": "Build Newspaper Style Columns ",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m8&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m8&clip=0&mode=live",
          "segments": [
            {
              "text": "Hello, and welcome back. In this unit we are going to use what we already know to build a new page at our dental website.",
              "displayTime": 0.0
            },
            {
              "text": "In the last unit, we built a basic mixin that allowed us to reuse several declarations.",
              "displayTime": 9.0
            },
            {
              "text": "In this unit we are going to build a mixin that accepts incoming values.",
              "displayTime": 16.0
            },
            {
              "text": "Remember this mixin that allowed us to round corners? Well we're going to modify it a little bit.",
              "displayTime": 20.0
            },
            {
              "text": "Let's add a variable to the mixin name, and use that variable in place of each declaration property.",
              "displayTime": 27.0
            },
            {
              "text": "Now when we include the mixin, we can send the value. In this case, we will send a one-half of an em as the",
              "displayTime": 34.0
            },
            {
              "text": "radius, but wait, we're not finished yet. One of the really powerful things about a mixin is that we can",
              "displayTime": 41.0
            },
            {
              "text": "have multiple passed values. In addition to sending the radius, we are also going to send the button",
              "displayTime": 49.0
            },
            {
              "text": "background color, which we add as an incoming variable and as a value in the include.",
              "displayTime": 55.0
            },
            {
              "text": "Notice that you separate multiple items with a comma. Now we can add a new property to the mixin for background-color.",
              "displayTime": 63.0
            },
            {
              "text": "In the demos file for this module, I have added the Prevention page, which is simply a list of 10 ways to",
              "displayTime": 70.0
            },
            {
              "text": "take care of your teeth. We're going to use a mixin to arrange this content into multiple columns.",
              "displayTime": 76.0
            },
            {
              "text": "Let's get started.",
              "displayTime": 81.0
            }
          ]
        },
        {
          "title": "Passing Values to a Mixin",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m8&clip=1&mode=live",
          "segments": [
            {
              "text": "If we open our Aspen Dental Pluralsight project, the demos.ZIP, and we take a look at the new prevention.html",
              "displayTime": 1.3648111111111
            },
            {
              "text": "page, down in the main, we have a row column combination, which contains the page name.",
              "displayTime": 9.3648111111111
            },
            {
              "text": "We also have a second row column combination, which contains 10 different ways to prevent disease,",
              "displayTime": 16.3648111111111
            },
            {
              "text": "and that's the end of the page. We're going to add an additional class to this column with 12 called",
              "displayTime": 23.3648111111111
            },
            {
              "text": "multicol or multicolumn. We'll save that. We're done with our HTML modifications.",
              "displayTime": 30.3648111111111
            },
            {
              "text": "I've opened up the variables partial where we have all of our variables set up.",
              "displayTime": 39.3648111111111
            },
            {
              "text": "We're going to be using this mixin in multiple places throughout our site.",
              "displayTime": 44.3648111111111
            },
            {
              "text": "If you'll open up code.txt from the demos.ZIP file, and paste it in the bottom of the variables, you've got a",
              "displayTime": 48.3648111111111
            },
            {
              "text": "partial mixin set up, I have not completed this. The mixins name is columns.",
              "displayTime": 58.3648111111111
            },
            {
              "text": "And then are two different vendor prefixes for multiple columns, as well as the standard for columns.",
              "displayTime": 66.3648111111111
            },
            {
              "text": "We've got two different vendor prefixes for the gap between the columns, as well as the standard.",
              "displayTime": 74.3648111111111
            },
            {
              "text": "And then there's the line that separates the column, once again in vendor prefixes and then the standard.",
              "displayTime": 79.3648111111111
            },
            {
              "text": "So we're going to set up two incoming variables for this mixin.",
              "displayTime": 87.3648111111111
            },
            {
              "text": "The first one will be the number of columns, we'll call it $count, put a comma.",
              "displayTime": 93.3648111111111
            },
            {
              "text": "The second variable will be called $line_color. The number we pass in for the number of columns needs to be",
              "displayTime": 99.3648111111111
            },
            {
              "text": "used for the column-count, the column-count, and the column-count.",
              "displayTime": 107.364811111111
            },
            {
              "text": "The color needs to be used down here for the color of the rule.",
              "displayTime": 114.364811111111
            },
            {
              "text": "Now this is very much like a border. You've got the width, you've got sort of wear, and then you have to",
              "displayTime": 118.364811111111
            },
            {
              "text": "have a color value. So we'll set that up as $line_color as the third value for the column rule.",
              "displayTime": 125.364811111111
            },
            {
              "text": "Now the column gap already exists as a value right here, so I'm just going to put that value,",
              "displayTime": 132.364811111111
            },
            {
              "text": "even though it's not passed in, it is being used, and it's dynamic so that if we ever change this $gutter",
              "displayTime": 140.364811111111
            },
            {
              "text": "value, our columns will automatically respond to that change. So now our mixin is built.",
              "displayTime": 147.364811111111
            },
            {
              "text": "Let's save it. Now on the phone there is not going to be multiple columns, it will just be a single column",
              "displayTime": 153.364811111111
            },
            {
              "text": "because the phone is so skinny, but once we hit our tablet, we want to make some changes.",
              "displayTime": 160.364811111111
            },
            {
              "text": "The columns we're creating are different than these columns we set up here, so let's come down a little ways,",
              "displayTime": 166.364811111111
            },
            {
              "text": "and we'll set up a NEWSPAPER STYLE COLUMNS because that's really what they look like.",
              "displayTime": 174.364811111111
            },
            {
              "text": "Remember the class that we used was called .multicol, so put a dot, multicolumn, open it and close it.",
              "displayTime": 179.364811111111
            },
            {
              "text": "So we'll start with @include, and then we go and put the name of it, which is columns, then we need to send",
              "displayTime": 188.364811111111
            },
            {
              "text": "two values with our columns so that when it gets to here, it can bring those two values in.",
              "displayTime": 205.364811111111
            },
            {
              "text": "So we need a $count and a $color. So the number of columns on a tablet's going to be 2, we could do F00,",
              "displayTime": 211.364811111111
            },
            {
              "text": "which is bright red, let's do that for now, save it. Let's preview our Prevention page, and there it is in",
              "displayTime": 219.364811111111
            },
            {
              "text": "two columns, and there's that red line. As we go back to phone, notice there are not two columns,",
              "displayTime": 229.364811111111
            },
            {
              "text": "and there's our break, and there's the line. Now the red line doesn't really work with our design, so let's go back.",
              "displayTime": 235.364811111111
            },
            {
              "text": "In our variables we have a color called $dkgrey. It's already assigned a hex value.",
              "displayTime": 244.364811111111
            },
            {
              "text": "Let's pass it that variable instead of the nasty red color. Save it, reload it, and now we've got a grey",
              "displayTime": 251.364811111111
            },
            {
              "text": "line separating our two columns. Now we need to go into the desktop and turn it into three columns.",
              "displayTime": 259.364811111111
            },
            {
              "text": "So we've already go this set up. We'll copy the NEWSPAPER STYLE COLUMNS from the tablet, and we'll open our",
              "displayTime": 266.364811111111
            },
            {
              "text": "desktop partial file. Down here under MAIN we'll drop in our new section, simply change this from a 2 to a",
              "displayTime": 272.364811111111
            },
            {
              "text": "3, reload it, and now we have 3 columns on the desktop, 2 columns on the tablet, and 1 column on the phone.",
              "displayTime": 280.364811111111
            },
            {
              "text": "Now let's take a look at the results of our CSS preprocessor output.",
              "displayTime": 292.364811111111
            },
            {
              "text": "I'm going to open styles.css, down around line 219 we have our NEWSPAPER STYLE COLUMNS, there's the class",
              "displayTime": 298.364811111111
            },
            {
              "text": "that was created in our tablet, and notice I've got three different declarations for the number of columns.",
              "displayTime": 309.364811111111
            },
            {
              "text": "There's my column gap, and there's the color. All of that was generated with one line of code in my tablet.",
              "displayTime": 318.364811111111
            },
            {
              "text": "If we move on down to around line 280 something, here is the columns for the desktop once again.",
              "displayTime": 331.364811111111
            },
            {
              "text": "All of this code was generated in a single statement, multicolumn send at a 3, send at a color.",
              "displayTime": 337.364811111111
            },
            {
              "text": "So that was an example of a more complex mixin being used for the tablet and the desktop.",
              "displayTime": 348.364811111111
            },
            {
              "text": "Next we're going to use control directives to set up a fancy multicolumn grid like you would get with a CSS",
              "displayTime": 353.364811111111
            },
            {
              "text": "framework like Foundation 5 or Bootstrap.",
              "displayTime": 360.364811111111
            }
          ]
        }
      ]
    },
    {
      "title": "Using a for Loop for a 12 Column Grid ",
      "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=0&mode=live",
      "clips": [
        {
          "title": "Introduction",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=0&mode=live",
          "segments": [
            {
              "text": "In this unit we are going to use control directives to build a new page for our dental website.",
              "displayTime": 0.0
            },
            {
              "text": "This is the last lesson on using a CSS preprocessor. Let's take a look at everything you have learned so far.",
              "displayTime": 7.0
            },
            {
              "text": "In this unit, we will be learning control directives and reviewing variables and math operations.",
              "displayTime": 14.0
            },
            {
              "text": "When you download the demos file for this module, you will see that I have added a homepage with four dental topics.",
              "displayTime": 20.0
            },
            {
              "text": "We want to be able to use columns to layout this page in a variety of ways.",
              "displayTime": 28.0
            },
            {
              "text": "Rather than coding all 12 column selectors manually, we are going to use control directives with some",
              "displayTime": 32.0
            },
            {
              "text": "variables thrown in.",
              "displayTime": 37.0
            },
            {
              "text": "Remember that there are four control directives that work inside the SASS render engine.",
              "displayTime": 40.0
            },
            {
              "text": "We're going to build two 12 column grids using 4.",
              "displayTime": 44.0
            },
            {
              "text": "We are going to take this a step beyond by creating two sets of column selectors just like you might get in a",
              "displayTime": 48.0
            },
            {
              "text": "CSS framework. In the phone partial, we are going to create 12 classes for small, 1-12.",
              "displayTime": 54.0
            },
            {
              "text": "Then in our tablet we are going to create 12 classes for large, 1-12.",
              "displayTime": 61.0
            },
            {
              "text": "As you can see from the final CSS, if we code this by hand, there are many lines of code and a potential to",
              "displayTime": 66.0
            },
            {
              "text": "make several mathematical miscalculations.",
              "displayTime": 72.0
            },
            {
              "text": "This is the basic layout of a control directive for a for loop.",
              "displayTime": 74.0
            },
            {
              "text": "We are going to create a variable called i, and then have that variable start at 1, and count up until it reaches 12.",
              "displayTime": 79.0
            },
            {
              "text": "Basically that means the CSS preprocessor will repeat this loop 12 times.",
              "displayTime": 85.0
            },
            {
              "text": "Now we need to use some math operations to calculate the width of each column.",
              "displayTime": 92.0
            },
            {
              "text": "Remember this code form unit 5, where we divided by 12, and then multiplied by 100% to get a percentage?",
              "displayTime": 97.0
            },
            {
              "text": "The first time through our loop, our width should be 1/12, or 8.33%.",
              "displayTime": 102.0
            },
            {
              "text": "The second time through the loop it should be 2/12, or 16.666%, and so on.",
              "displayTime": 108.0
            },
            {
              "text": "So here's what we have so far. We are going to create another new variable called w for width, followed by a",
              "displayTime": 115.0
            },
            {
              "text": "colon, which means assign. Next we will divide i by 12, and then multiply by 100% to get the correct value",
              "displayTime": 122.0
            },
            {
              "text": "for each loop. Each time we go through the loop, the variable W will have a new value expressed as a percentage.",
              "displayTime": 130.0
            },
            {
              "text": "Remember that the class names are .small-1, and .small-2, etc. We can divide the class names into two parts.",
              "displayTime": 137.0
            },
            {
              "text": "The beginning is the same for all class selectors. Well the second part increments up one each time.",
              "displayTime": 146.0
            },
            {
              "text": "For the second part, we will use the variable i, and wrap it in curly braces.",
              "displayTime": 155.0
            },
            {
              "text": "Then we will apply SCSS glue to connect the first and the second part together, this is called interpolation.",
              "displayTime": 159.0
            },
            {
              "text": "We are now ready to create a dynamic selector and declaration block.",
              "displayTime": 166.0
            },
            {
              "text": "Our selector has both parts we just discussed, and our declaration block uses the variable w for width and a",
              "displayTime": 171.0
            },
            {
              "text": "standard float:left. As you can see, we have used the variable i three different places, and the variable w twice.",
              "displayTime": 179.5
            },
            {
              "text": "Now that the difficult part is done, we will also implement some SCSS that allows you to wrap text around",
              "displayTime": 188.0
            },
            {
              "text": "non-square shapes, which is actually pretty cool. Let's start coding.",
              "displayTime": 193.0
            }
          ]
        },
        {
          "title": "The Demo File",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=1&mode=live",
          "segments": [
            {
              "text": "Once you've downloaded the demos for this module, you will see that we have a new homepage with four dental",
              "displayTime": 2.0
            },
            {
              "text": "topics, X-rays, Sports, and Fluoride, and Pregnancy. Each of these has an h2 with a triangular-shaped",
              "displayTime": 7.354833333333
            },
            {
              "text": "graphic, followed by a paragraph of information. Now if we look at the back-end, we can see that the",
              "displayTime": 14.354833333333
            },
            {
              "text": "homepage is something we've done before. It's got a row, it's got a column.",
              "displayTime": 21.354833333333
            },
            {
              "text": "Notice it has a width of 12/12, which is 100%. Once we get down to the new stuff, we start with the row,",
              "displayTime": 25.354833333333
            },
            {
              "text": "we have a class of column, notice there is no width specified, we'll do that a little bit later.",
              "displayTime": 33.354833333333
            },
            {
              "text": "Then we have our h2, followed by our graphic, and then once again there's the paragraph text.",
              "displayTime": 38.5
            },
            {
              "text": "There are three columns in this first row. And then just to give us an option to kind of break things up a",
              "displayTime": 43.354833333333
            },
            {
              "text": "little bit, I've created another row starting with an empty column, then there's the Pregnancy column in the",
              "displayTime": 51.354833333333
            },
            {
              "text": "middle, followed by another empty column on the right, followed by the end of the row.",
              "displayTime": 59.0
            },
            {
              "text": "So that's what we have to work with for this module.",
              "displayTime": 65.0
            }
          ]
        },
        {
          "title": "Building a for Loop",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=2&mode=live",
          "segments": [
            {
              "text": "Here in our phone-default partial we're going to put",
              "displayTime": 1.0
            },
            {
              "text": "our code underneath the columns that we've already started. Let's begin with @for, we'll create a new",
              "displayTime": 4.2522444444441
            },
            {
              "text": "variable called i, then we'll type from 1 through 12, open curly, and close curly.",
              "displayTime": 10.2522444444441
            },
            {
              "text": "Now let's test this loop to make sure it's working. We'll put a comment that says hello.",
              "displayTime": 19.2522444444441
            },
            {
              "text": "Save it, we'll open our styles.css, which is the output. Down here around line 180 we can see 12 instances",
              "displayTime": 24.2522444444441
            },
            {
              "text": "of hello, so our loop is repeating correctly. Now let's replace that with a class declaration and some properties.",
              "displayTime": 31.2522444444441
            },
            {
              "text": "Small-1, and we'll do float: left, save it. Once again we'll check our output.",
              "displayTime": 40.2522444444441
            },
            {
              "text": "Here we have 12 instances of small-1, so it is repeating, we do have our float: left, but what we really need",
              "displayTime": 49.2522444444441
            },
            {
              "text": "instead of 12 small-1s is we need a 1, a 2, a 3, a 4. So let's go back here, and let's get rid of this 1,",
              "displayTime": 56.2522444444441
            },
            {
              "text": "and we'll replace it with curly braces, inside of that we'll put our variable i.",
              "displayTime": 65.2522444444441
            },
            {
              "text": "Now we need to glue this part to this part, and we do that with a pound sign.",
              "displayTime": 72.2522444444441
            },
            {
              "text": "Save it, check our output one again, here's our output for styles.css.",
              "displayTime": 78.2522444444441
            },
            {
              "text": "We have 1, 2, 3, 4, 5 all the way through 12. So that variable is working correctly.",
              "displayTime": 83.2522444444441
            },
            {
              "text": "Now we need to get some values in here for width that are dynamically generated.",
              "displayTime": 90.2522444444441
            },
            {
              "text": "So let's put width: 50%; and float: left was already there. If we save it, we can see that all of those 1",
              "displayTime": 96.2522444444441
            },
            {
              "text": "through 12 have a 50% width. Now that we have both rules in place, we simply need to change this to be a dynamic value.",
              "displayTime": 108.252244444444
            },
            {
              "text": "Let's create a new variable called w, we'll then assign it to be the incrementing value, which is $i,",
              "displayTime": 117.252244444444
            },
            {
              "text": "and then divide that by 12, and then let's take that dynamic value, and instead of 50%, we'll reuse it as $w.",
              "displayTime": 127.252244444444
            },
            {
              "text": "Let's save that, open our output. Here we can see that we are indeed getting a width expressed as 0.08333,",
              "displayTime": 137.252244444444
            },
            {
              "text": "0.166, but those are not percentages, they're just nicely divided numbers.",
              "displayTime": 144.252244444444
            },
            {
              "text": "We need to change each of these widths to express them as percentages instead of as decimals like they are.",
              "displayTime": 150.252244444444
            },
            {
              "text": "So we'll switch back. We'll simply times this value by 100%, that'll move the decimal place over 2,",
              "displayTime": 157.252244444444
            },
            {
              "text": "and add the percentage for our value. Let's take a look at it one more time.",
              "displayTime": 165.252244444444
            },
            {
              "text": "So here on line 180 we have a small-1, it has a width of 8.333%, float: left, there's number 2 expressed",
              "displayTime": 171.252244444444
            },
            {
              "text": "correctly, and so on all the way up to 12. Now that we have the code done for our phone-default,",
              "displayTime": 182.252244444444
            },
            {
              "text": "let's copy it, let's open our tablet.scss file. Once again under the columns, we're going to repeat that",
              "displayTime": 188.252244444444
            },
            {
              "text": "same block of code, but instead of using the class small, we're going to change it to large.",
              "displayTime": 195.252244444444
            },
            {
              "text": "So now we'll have a second set of values for column widths. Let's save that, open our output, here on line",
              "displayTime": 201.252244444444
            },
            {
              "text": "180 we have our 1-12, here on line 266 we have large 1-12. Now let's take a look at how we can use these",
              "displayTime": 209.252244444444
            },
            {
              "text": "different columns in our phone and our tablet to create different layouts depending on the browser width.",
              "displayTime": 219.0
            }
          ]
        },
        {
          "title": "Using 12-column Grids to Design a Layout",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=3&mode=live",
          "segments": [
            {
              "text": "Let's jump back to our code editor, and assign some of these columns a width.",
              "displayTime": 1.5
            },
            {
              "text": "Remember there are three columns in this initial row. So we'll do a space, which means a second class, small-4.",
              "displayTime": 5.3522444444441
            },
            {
              "text": "Remember they're 12 columns wide, so we'll use 4 for that one. Come down to the next one, small-4,",
              "displayTime": 16.3522444444441
            },
            {
              "text": "and then down to the third one, small-4. So if each of these are 4 for a 12, that should be the full width on devices.",
              "displayTime": 24.3522444444441
            },
            {
              "text": "We'll save that, pull up our browser, let's hit refresh, and on a desktop we have 4, 4, and 4, nice even division.",
              "displayTime": 36.3522444444441
            },
            {
              "text": "However when we go to our smaller screens, we can see that our words are being chopped off, and three columns",
              "displayTime": 45.3522444444441
            },
            {
              "text": "just isn't quite going to cut it. So, let's make one of them full width and the other two side-by-side.",
              "displayTime": 50.3522444444441
            },
            {
              "text": "We can see that the first column is the longest, so let's make it 12, and then let's make the second one 6,",
              "displayTime": 57.3522444444441
            },
            {
              "text": "and the third one 6. So here's X-rays, on a small screen it will be 12 or full width, that will then force",
              "displayTime": 64.3522444444441
            },
            {
              "text": "the next column down to the next row, which will take half of the second row and the other half of the second row.",
              "displayTime": 71.3522444444441
            },
            {
              "text": "Let's now refresh, so there's X-rays full width and side-by-side Sports and Fluoride.",
              "displayTime": 80.3522444444441
            },
            {
              "text": "Once again when we go all the way out, it still doesn't look too bad, but we want to change it up a little bit.",
              "displayTime": 90.3522444444441
            },
            {
              "text": "That's why we have the second set of large 1-12. Back to our editor.",
              "displayTime": 96.3522444444441
            },
            {
              "text": "We'll add another class to each of these called large-4, let's copy that one, paste it there, and paste it there.",
              "displayTime": 101.352244444444
            },
            {
              "text": "So this means that once we hit the tablet or the larger size, each of those should jump to a third of the available space.",
              "displayTime": 115.352244444444
            },
            {
              "text": "Let's check it out, and there it is. Three even columns. We go to small, we have the wide, followed by two 50%-ers.",
              "displayTime": 123.352244444444
            },
            {
              "text": "Now as we take a look at this one, we could balance this out a little bit better because there's a lot more",
              "displayTime": 133.352244444444
            },
            {
              "text": "text here on the first one, than there is in the second and third one.",
              "displayTime": 138.352244444444
            },
            {
              "text": "So instead of giving them a third, a third, a third, or in other words 4/12, 4/12 4/12, let's mix it up a",
              "displayTime": 143.352244444444
            },
            {
              "text": "little bit, and give this one 1 extra, and take 1 away from this one.",
              "displayTime": 150.352244444444
            },
            {
              "text": "Back to our code editor. So the first one has lots of text, let's give it an extra, which is 5,",
              "displayTime": 154.352244444444
            },
            {
              "text": "and the total still needs to be a multiple of 12, so we'll drop this one from 4 to 3, so 5 plus 3 is 8 plus 4",
              "displayTime": 161.352244444444
            },
            {
              "text": "is 12, that should fill the full width of the screen, refresh it, and there it is.",
              "displayTime": 170.352244444444
            },
            {
              "text": "X-rays, Sports, and Fluoride line up really close at the bottom to be even, and we still have the same result",
              "displayTime": 176.352244444444
            },
            {
              "text": "on our phone. Now that we have the first row styled, let's go down to the second row where we're going to",
              "displayTime": 183.352244444444
            },
            {
              "text": "mix things up a little bit. On our small screens, we don't want to have the first column or the last column",
              "displayTime": 188.352244444444
            },
            {
              "text": "show up at all. So, we'll set them to small-0, and then we'll have the middle one take up all 12 columns.",
              "displayTime": 194.352244444444
            },
            {
              "text": "So it should be full width. Now that's the way it already is because these two are empty.",
              "displayTime": 205.352244444444
            },
            {
              "text": "Once we get to a larger screen though, we want to make this Pregnancy one come in a little bit, it's sort of",
              "displayTime": 209.352244444444
            },
            {
              "text": "like a block quote. So we'll set this to large-1, and then right side to large-1, and if we have 12 columns",
              "displayTime": 216.352244444444
            },
            {
              "text": "total, we have 1 for the left, 1 for the right, this one has to be large-10.",
              "displayTime": 227.352244444444
            },
            {
              "text": "Save it, see if it works. Here's our small screen rendering, you can see that this text goes all the way",
              "displayTime": 234.5
            },
            {
              "text": "from the left to the right. As we widen it out, there's an empty column there, an empty column there,",
              "displayTime": 239.352244444444
            },
            {
              "text": "and 10 in the middle. So now we've got another way to lay out a page.",
              "displayTime": 246.5
            }
          ]
        },
        {
          "title": "Textwrapping Using Shape Outside",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=4&mode=live",
          "segments": [
            {
              "text": "Now let's take the text and wrap it around these triangular-shaped graphics.",
              "displayTime": 0.0
            },
            {
              "text": "In our text editor, we're going to add a class to each of the images.",
              "displayTime": 5.8189111111111
            },
            {
              "text": "I'm going to copy that class of triangle, and paste it, and paste it.",
              "displayTime": 9.8189111111111
            },
            {
              "text": "Here on our phone default we'll create another section called IMAGES, and we'll start with the class triangle.",
              "displayTime": 19.8189111111111
            },
            {
              "text": "First thing we want to do is float: left. That you've probably been doing for years, it looks like that,",
              "displayTime": 29.8189111111111
            },
            {
              "text": "nice and square, but we want it to be triangular in shape. So now we need to add a little bit to it.",
              "displayTime": 35.8189111111111
            },
            {
              "text": "We'll start with shape-outside: polygon. In here we're going to set up three corners on a standard X and Y grid axis.",
              "displayTime": 42.8189111111111
            },
            {
              "text": "So we're going to start in the upper-left corner of our image, so that's 0 0,.",
              "displayTime": 53.8189111111111
            },
            {
              "text": "Now we're going to move to the right, so our X axis is now at 100% the width of the image, and our down value",
              "displayTime": 61.8189111111111
            },
            {
              "text": "is still 0,. Our third value has now descended to the bottom-left corner, so the X axis is back to 0,",
              "displayTime": 68.8189111111111
            },
            {
              "text": "and the Y axis is now 100% down, and then it returns to the 0 0 point.",
              "displayTime": 79.8189111111111
            },
            {
              "text": "So there are the three points, upper-left, upper-right, skip the bottom-right, go straight to the bottom-left.",
              "displayTime": 86.8189111111111
            },
            {
              "text": "Now we're going to need that same thing with a vendor prefix of -webkit.",
              "displayTime": 97.8189111111111
            },
            {
              "text": "So let's try that out. Now the text wraps nicely around our triangular shape, but we have some more work to do.",
              "displayTime": 104.818911111111
            },
            {
              "text": "Notice each of these triangle shapes are little too high, it sticks up above our body text, so we need to",
              "displayTime": 111.818911111111
            },
            {
              "text": "push it down with some margin. We also want to push the text away from this edge a little bit, so it doesn't",
              "displayTime": 117.818911111111
            },
            {
              "text": "look quite so squished. So in our image.triangle we'll add some margin, and we'll put four values.",
              "displayTime": 124.818911111111
            },
            {
              "text": "The first value is going to push it down so that it matches the line height of the text.",
              "displayTime": 132.818911111111
            },
            {
              "text": "Now the next two values are a little bit tricky, so let me use some really large values to demonstrate what's",
              "displayTime": 139.818911111111
            },
            {
              "text": "going on here. Let's use say 50px, and then for the bottom side let's leave it at 0, and of course we",
              "displayTime": 144.818911111111
            },
            {
              "text": "already know the left needs to be 0, so let's save that. Here you can see the 50px at the top, and it sort",
              "displayTime": 152.818911111111
            },
            {
              "text": "of makes a triangular shape to 0 at the bottom. So if you are after sort of a triangle wedge, you'd have it,",
              "displayTime": 160.818911111111
            },
            {
              "text": "but we're not. Instead we want to make the second and third values match so that we get a parallel line",
              "displayTime": 166.818911111111
            },
            {
              "text": "between our text and the edge of the triangle graphic. So if I put 50px here, now we get an even 50px",
              "displayTime": 172.818911111111
            },
            {
              "text": "separating these 2. Now that's a little bit too much for my design taste, so I'll drop it back to say 20,",
              "displayTime": 180.5
            },
            {
              "text": "and there you have it.",
              "displayTime": 189.818911111111
            }
          ]
        },
        {
          "title": "Testing for Multiple Browsers and Mobile Devices",
          "playerUrl": "//app.pluralsight.com/player?course=hands-on-responsive-design-css-preprocessor&author=paul-cheney&name=hands-on-responsive-design-css-preprocessor-m9&clip=5&mode=live",
          "segments": [
            {
              "text": "So let's open up windows and take a look at our work. Here's Internet Explorer 10.",
              "displayTime": 2.0
            },
            {
              "text": "You can see that it does not recognize the shape outside. Here's Chrome on Windows, it works great.",
              "displayTime": 6.3189111111111
            },
            {
              "text": "Firefox on Windows does not recognize it, and Opera, it works great.",
              "displayTime": 13.3189111111111
            },
            {
              "text": "My guess is in a few months these will all work beautifully across all platforms.",
              "displayTime": 19.3189111111111
            },
            {
              "text": "And here's the result for the current state of affairs for Macintosh browsers.",
              "displayTime": 25.3189111111111
            },
            {
              "text": "As you can see from our work so far on this project, Chrome is working fine.",
              "displayTime": 29.3189111111111
            },
            {
              "text": "Here we have Safari, it's also recognizing the shape outside. Firefox, once again does not pass the mustard",
              "displayTime": 33.3189111111111
            },
            {
              "text": "on that one. Opera on Macintosh works fine.",
              "displayTime": 41.3189111111111
            },
            {
              "text": "So here's the results of our work on an iPad. You can see that the columns are recognizing shape outside,",
              "displayTime": 45.3189111111111
            },
            {
              "text": "and the text is wrapping properly. If we change to our Repair Options page, we can click on each of these",
              "displayTime": 53.3189111111111
            },
            {
              "text": "sub-navigation items, and be taken directly to that portion of our page.",
              "displayTime": 61.3189111111111
            },
            {
              "text": "We also have our Prevention page, which is two columns where the text wraps kind of like a newspaper style.",
              "displayTime": 67.3189111111111
            },
            {
              "text": "When we flip our tablet the other way, it's still two columns for the Prevention page, and the Repair Options",
              "displayTime": 75.3189111111111
            },
            {
              "text": "page squishes so that each of the items still takes 25% of the total available space, and of course our",
              "displayTime": 82.3189111111111
            },
            {
              "text": "homepage still works beautifully.",
              "displayTime": 89.3189111111111
            },
            {
              "text": "Here we have our website showing up on a phone. If you can see, the triangular shape wrap did work fine.",
              "displayTime": 92.3189111111111
            },
            {
              "text": "Remember that we had small set up so that the X-rays was full width, and Sports and Fluoride was partial width.",
              "displayTime": 98.3189111111111
            },
            {
              "text": "Pregnancy was also full width. On our Repair Options page, the names used for each of these tabs is",
              "displayTime": 105.318911111111
            },
            {
              "text": "shortened so that they fit the width correctly, and still we can get four across.",
              "displayTime": 112.318911111111
            },
            {
              "text": "Touching them of course works beautifully. In our Prevention page, we have a single column, whereas on the",
              "displayTime": 116.318911111111
            },
            {
              "text": "tablet we had two columns, and on the desktop we had three columns.",
              "displayTime": 124.318911111111
            },
            {
              "text": "So that wraps up our discussion of using a CSS preprocessor for responsive mobile first design.",
              "displayTime": 129.318911111111
            },
            {
              "text": "I hope I've convinced you to use a CSS preprocessor on your next project.",
              "displayTime": 135.0
            }
          ]
        }
      ]
    }
  ]
}